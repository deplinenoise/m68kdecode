> move.b d0,d1
# { .size = 1, .operation = M68K_MOVE, .operands = { DR(0), DR(1) } }

> move.b d2,d3
# { .size = 1, .operation = M68K_MOVE, .operands = { DR(2), DR(3) } }

> move.b d4,d5
# { .size = 1, .operation = M68K_MOVE, .operands = { DR(4), DR(5) } }

> move.b d6,d7
# { .size = 1, .operation = M68K_MOVE, .operands = { DR(6), DR(7) } }

> move.w a0,a1
# { .size = 2, .operation = M68K_MOVEA, .operands = { AR(0), AR(1) } }

> move.w a2,a3
# { .size = 2, .operation = M68K_MOVEA, .operands = { AR(2), AR(3) } }

> move.w a4,a5
# { .size = 2, .operation = M68K_MOVEA, .operands = { AR(4), AR(5) } }

> move.w a6,a7
# { .size = 2, .operation = M68K_MOVEA, .operands = { AR(6), AR(7) } }

> move.b 123(a0,d0),d3 
# { .size = 1, .operation = M68K_MOVE, .operands = { ARDISP(0, DR_DISP(0, 123)), DR(3) } }

> move.w 123(a0,d0),d3 
# { .size = 2, .operation = M68K_MOVE, .operands = { ARDISP(0, DR_DISP(0, 123)), DR(3) } }

> move.l 123(a0,d0),d3 
# { .size = 4, .operation = M68K_MOVE, .operands = { ARDISP(0, DR_DISP(0, 123)), DR(3) } }

> move.l 123(a0,d0),a1 
# { .size = 4, .operation = M68K_MOVEA, .operands = { ARDISP(0, DR_DISP(0, 123)), AR(1) } }

> move.w 123(a0,d0),a1 
# { .size = 2, .operation = M68K_MOVEA, .operands = { ARDISP(0, DR_DISP(0, 123)), AR(1) } }

> move.b #$12,d7 
# { .size = 1, .operation = M68K_MOVE, .operands = { IMM8(0x12), DR(7) } }

> move.w #$1234,d7 
# { .size = 2, .operation = M68K_MOVE, .operands = { IMM16(0x1234), DR(7) } }

> move.l #$12345678,d7 
# { .size = 4, .operation = M68K_MOVE, .operands = { IMM32(0x12345678), DR(7) } }

> move.l D1,-(A2)
# { .size = 4, .operation = M68K_MOVE, .operands = { DR(1), ARDEC(2) } }

> move.l D1,(A2)+
# { .size = 4, .operation = M68K_MOVE, .operands = { DR(1), ARINC(2) } }

> move.l -(A4),(A2)+
# { .size = 4, .operation = M68K_MOVE, .operands = { ARDEC(4), ARINC(2) } }

> move.l 4.w,A0
# { .size = 4, .operation = M68K_MOVEA, .operands = { ABS16(4), AR(0) } }

> move.l $11223344,A0
# { .size = 4, .operation = M68K_MOVEA, .operands = { ABS32(0x11223344), AR(0) } }

> move.w #$1234,123(d5)
# {
#   .size = 2, .operation = M68K_MOVE, .operands = { 
#     IMM16(0x1234),
#     {
#        .kind = M68K_DISP,
#        .data = {
#           .plain_disp = {
#             .base_displacement = 123,
#             .outer_displacement = 0,
#             .indexer_type = M68K_INDEXER_DR,
#             .indexer_scale = 1,
#             .indexer_reg = 5,
#             .indirection_type = M68K_NO_INDIRECTION,
#           }
#        }
#      }
#    }
#  }

> move.w -8(pc),d3
# {
#   .size = 2, .operation = M68K_MOVE, .operands = { 
#     { .kind = M68K_PCDISP, .data = { .pc_disp = { .pc_offset = 2, .disp = {
#       .base_displacement = -8,
#       .outer_displacement = 0,
#       .indexer_type = M68K_NO_INDEXER,
#       .indexer_scale = 1,
#       .indirection_type = M68K_NO_INDIRECTION,
#     } } } },
#     DR(3),
#   },
# }

> move.w -8(pc,d2*8),d3
# {
#   .size = 2, .operation = M68K_MOVE, .operands = { 
#     { .kind = M68K_PCDISP, .data = { .pc_disp = { .pc_offset = 2, .disp = {
#       .base_displacement = -8,
#       .outer_displacement = 0,
#       .indexer_type = M68K_INDEXER_DR,
#       .indexer_scale = 8,
#       .indexer_reg = 2,
#       .indirection_type = M68K_NO_INDIRECTION,
#     } } } },
#     DR(3),
#   },
# }

> move.w 123(a1,d2*4),9876(a2,d3*2)
# {
#   .size = 2,
#   .operation = M68K_MOVE,
#   .operands = {
#     ARDISP(1, DR_DISP_SCALE(2, 123, 4)),
#     ARDISP(2, DR_DISP_SCALE(3, 9876, 2))
#   },
# }

> move.w d0,12345(a0,a1*2)
# {
#   .size = 2,
#   .operation = M68K_MOVE,
#   .operands = {
#     DR(0),
#     ARDISP(0, ((m68k_disp) {
#       .base_displacement = 12345,
#       .outer_displacement = 0,
#       .indexer_type = M68K_INDEXER_AR,
#       .indexer_reg = 1,
#       .indexer_scale = 2,
#       .indirection_type = M68K_NO_INDIRECTION,
#     }))
#   },
# }

> lea (a0),a1
# { .size = 4, .operation = M68K_LEA, .operands = { ARIND(0), AR(1) } }

> lea 8(a0),a1
# { .size = 4, .operation = M68K_LEA, .operands = { ARDISP(0, simple_disp(8)), AR(1) }  }

> ori #17,ccr
# { .size = 1, .operation = M68K_ORITOCCR, .operands = { IMM8(17), IMPLIED }  }

> ori #$1234,sr
# { .size = 2, .operation = M68K_ORITOSR, .operands = { IMM16(0x1234), IMPLIED }  }

> ori.w #$1234,d0
# { .size = 2, .operation = M68K_ORI, .operands = { IMM16(0x1234), DR(0) }  }

> ori.b #$12,d2
# { .size = 1, .operation = M68K_ORI, .operands = { IMM8(0x12), DR(2) }  }

> ori.w #$1234,123(a0,d0)
# { .size = 2, .operation = M68K_ORI, .operands = { IMM16(0x1234), ARDISP(0, DR_DISP(0, 123)) }  }

> ori.l #$12345678,-(a0)
# { .size = 4, .operation = M68K_ORI, .operands = { IMM32(0x12345678), ARDEC(0) }  }

> andi #17,ccr
# { .size = 1, .operation = M68K_ANDITOCCR, .operands = { IMM8(17), IMPLIED }  }

> andi #$1234,sr
# { .size = 2, .operation = M68K_ANDITOSR, .operands = { IMM16(0x1234), IMPLIED }  }

> andi.w #$1234,d0
# { .size = 2, .operation = M68K_ANDI, .operands = { IMM16(0x1234), DR(0) }  }

> andi.b #$12,d2
# { .size = 1, .operation = M68K_ANDI, .operands = { IMM8(0x12), DR(2) }  }

> andi.w #$1234,123(a0,d0)
# { .size = 2, .operation = M68K_ANDI, .operands = { IMM16(0x1234), ARDISP(0, DR_DISP(0, 123)) }  }

> andi.l #$12345678,-(a0)
# { .size = 4, .operation = M68K_ANDI, .operands = { IMM32(0x12345678), ARDEC(0) }  }

> eori #17,ccr
# { .size = 1, .operation = M68K_EORITOCCR, .operands = { IMM8(17), IMPLIED }  }

> eori #$1234,sr
# { .size = 2, .operation = M68K_EORITOSR, .operands = { IMM16(0x1234), IMPLIED }  }

> eori.w #$1234,d0
# { .size = 2, .operation = M68K_EORI, .operands = { IMM16(0x1234), DR(0) }  }

> eori.b #$12,d2
# { .size = 1, .operation = M68K_EORI, .operands = { IMM8(0x12), DR(2) }  }

> eori.w #$1234,123(a0,d0)
# { .size = 2, .operation = M68K_EORI, .operands = { IMM16(0x1234), ARDISP(0, DR_DISP(0, 123)) } }

> eori.l #$12345678,-(a0)
# { .size = 4, .operation = M68K_EORI, .operands = { IMM32(0x12345678), ARDEC(0) } }

> addi.l #$12345678,-(a0)
# { .size = 4, .operation = M68K_ADDI, .operands = { IMM32(0x12345678), ARDEC(0) } }

> subi.l #$12345678,-(a0)
# { .size = 4, .operation = M68K_SUBI, .operands = { IMM32(0x12345678), ARDEC(0) } }

! 68020
> rtm d3
# { .size = 0, .operation = M68K_RTM, .operands = { DR(3), NO_OPERAND } }

! 68020
> rtm a1
# { .size = 0, .operation = M68K_RTM, .operands = { AR(1), NO_OPERAND } }

! 68020
> callm #3,(a1)
# { .size = 0, .operation = M68K_CALLM, .operands = { IMM8(3), ARIND(1) } }

! 68020
> callm #99,$12345678
# { .size = 0, .operation = M68K_CALLM, .operands = { IMM8(99), ABS32(0x12345678) } }

> cmp2.l (a0),d3
# { .size = 4, .operation = M68K_CMP2, .operands = { ARIND(0), DR(3) } }

> cmp2.b 90(a0,d2),a6
# { .size = 1, .operation = M68K_CMP2, .operands = { ARDISP(0, DR_DISP(2, 90)), AR(6) } }

> chk2.w 90(a0,d2),a6
# { .size = 2, .operation = M68K_CHK2, .operands = { ARDISP(0, DR_DISP(2, 90)), AR(6) } }

> cmpi.b #$a5,90(a0,d2*4)
# { .size = 1, .operation = M68K_CMPI, .operands = { IMM8(0xa5), ARDISP(0, DR_DISP_SCALE(2, 90, 4)) } }

> cmpi.w #$a512,90(a0,d2*4)
# { .size = 2, .operation = M68K_CMPI, .operands = { IMM16(0xa512), ARDISP(0, DR_DISP_SCALE(2, 90, 4)) } }

> cmpi.l #$12345678,90(a0,d2*4)
# { .size = 4, .operation = M68K_CMPI, .operands = { IMM32(0x12345678), ARDISP(0, DR_DISP_SCALE(2, 90, 4)) } }

> btst #18,d0
# { .size = 4, .operation = M68K_BTST, .operands = { IMM16(18), DR(0) } }

> btst #18,(a0)+
# { .size = 1, .operation = M68K_BTST, .operands = { IMM16(18), ARINC(0) } }

> btst d0,#18
# { .size = 1, .operation = M68K_BTST, .operands = { DR(0), IMM16(18) } }

> bclr #18,(a0)+
# { .size = 1, .operation = M68K_BCLR, .operands = { IMM16(18), ARINC(0) } }

> bclr #18,d0
# { .size = 4, .operation = M68K_BCLR, .operands = { IMM16(18), DR(0) } }

> bchg #18,(a0)+
# { .size = 1, .operation = M68K_BCHG, .operands = { IMM16(18), ARINC(0) } }

> bchg #18,d0
# { .size = 4, .operation = M68K_BCHG, .operands = { IMM16(18), DR(0) } }

> bset #18,(a0)+
# { .size = 1, .operation = M68K_BSET, .operands = { IMM16(18), ARINC(0) } }

> bset #18,d0
# { .size = 4, .operation = M68K_BSET, .operands = { IMM16(18), DR(0) } }

> moves.l a0,(a1)
# { .size = 4, .operation = M68K_MOVES, .operands = { AR(0), ARIND(1) } }

> moves.b d0,(a1)
# { .size = 1, .operation = M68K_MOVES, .operands = { DR(0), ARIND(1) } }

> cas d0,d1,(a0)
# M68K_NOT_IMPLEMENTED

> cas2 d0:d1,d2:d3,(a0):(a1)
# M68K_NOT_IMPLEMENTED

// doesn't work on all CPUs, assembler freaks out
// > bgnd
// # { .size = 0, .operation = M68K_BGND, .operands = { NO_OPERAND, NO_OPERAND } }

> illegal
# { .size = 0, .operation = M68K_ILLEGAL, .operands = { NO_OPERAND, NO_OPERAND } }

> nop
# { .size = 0, .operation = M68K_NOP, .operands = { NO_OPERAND, NO_OPERAND } }

> reset
# { .size = 0, .operation = M68K_RESET, .operands = { NO_OPERAND, NO_OPERAND } }

> rtd #578
# { .size = 0, .operation = M68K_RTD, .operands = { IMM16(578), NO_OPERAND } }

> rte
# { .size = 0, .operation = M68K_RTE, .operands = { NO_OPERAND, NO_OPERAND } }

> rtr
# { .size = 0, .operation = M68K_RTR, .operands = { NO_OPERAND, NO_OPERAND } }

> rts
# { .size = 0, .operation = M68K_RTS, .operands = { NO_OPERAND, NO_OPERAND } }

> stop #123
# { .size = 0, .operation = M68K_STOP, .operands = { IMM16(123), NO_OPERAND } }

> trapv
# { .size = 0, .operation = M68K_TRAPV, .operands = { NO_OPERAND, NO_OPERAND } }

> swap d7
# { .size = 0, .operation = M68K_SWAP, .operands = { DR(7), NO_OPERAND } }

> bkpt #3
# { .size = 0, .operation = M68K_BKPT, .operands = { IMM8(3), NO_OPERAND } }

> ext.w d6
# { .size = 2, .operation = M68K_EXTW, .operands = { DR(6), NO_OPERAND } }

> ext.l d6
# { .size = 4, .operation = M68K_EXTL, .operands = { DR(6), NO_OPERAND } }

> extb.l d6
# { .size = 4, .operation = M68K_EXTBL, .operands = { DR(6), NO_OPERAND } }

> link.w a0,#1234
# { .size = 2, .operation = M68K_LINK, .operands = { AR(0), IMM16(1234) } }

> link.l a5,#$12345678
# { .size = 4, .operation = M68K_LINK, .operands = { AR(5), IMM32(0x12345678) } }

> unlk a2
# { .size = 0, .operation = M68K_UNLK, .operands = { AR(2), NO_OPERAND } }

> trap #15
# { .size = 0, .operation = M68K_TRAP, .operands = { IMM8(15), NO_OPERAND } }

> divs.w (a1)+,d2
# { .size = 2, .operation = M68K_DIVS, .operands = { ARINC(1), DR(2) } }

> divs.l d0,d2
# { .size = 4, .operation = M68K_DIVSL, .operands = { DR(0), DR(2) } }

> divs.l d0,d3:d2
# { .size = 4, .operation = M68K_DIVSL, .operands = { DR(0), DPAIR(2, 3) } }

> divsl.l d0,d3:d2
# { .size = 4, .operation = M68K_DIVSLL, .operands = { DR(0), DPAIR(2, 3) } }

> divu.w (a1)+,d2
# { .size = 2, .operation = M68K_DIVU, .operands = { ARINC(1), DR(2) } }

> divu.l d0,d2
# { .size = 4, .operation = M68K_DIVUL, .operands = { DR(0), DR(2) } }

> divu.l d0,d3:d2
# { .size = 4, .operation = M68K_DIVUL, .operands = { DR(0), DPAIR(2, 3) } }

> divul.l d0,d3:d2
# { .size = 4, .operation = M68K_DIVULL, .operands = { DR(0), DPAIR(2, 3) } }

> jmp (a0)
# { .size = 0, .operation = M68K_JMP, .operands = { ARIND(0), NO_OPERAND } }

> jmp $12345678
# { .size = 0, .operation = M68K_JMP, .operands = { ABS32(0x12345678), NO_OPERAND } }

> jmp 123(pc)
# {
#   .size = 0, .operation = M68K_JMP, .operands = { 
#     { .kind = M68K_PCDISP, .data = { .pc_disp = { .pc_offset = 2, .disp = {
#       .base_displacement = 123,
#       .outer_displacement = 0,
#       .indexer_type = M68K_NO_INDEXER,
#       .indexer_scale = 1,
#       .indexer_reg = 0,
#       .indirection_type = M68K_NO_INDIRECTION,
#     } } } },
#     NO_OPERAND,
#   },
# }

> jsr (a0)
# { .size = 0, .operation = M68K_JSR, .operands = { ARIND(0), NO_OPERAND } }

> jsr $12345678
# { .size = 0, .operation = M68K_JSR, .operands = { ABS32(0x12345678), NO_OPERAND } }

> jsr 123(pc)
# {
#   .size = 0, .operation = M68K_JSR, .operands = { 
#     { .kind = M68K_PCDISP, .data = { .pc_disp = { .pc_offset = 2, .disp = {
#       .base_displacement = 123,
#       .outer_displacement = 0,
#       .indexer_type = M68K_NO_INDEXER,
#       .indexer_scale = 1,
#       .indexer_reg = 0,
#       .indirection_type = M68K_NO_INDIRECTION,
#     } } } },
#     NO_OPERAND,
#   },
# }

> muls.w  d0,d1
# { .size = 2, .operation = M68K_MULS, .operands = { DR(0), DR(1) } }

> muls.l  d0,d1
# { .size = 4, .operation = M68K_MULS, .operands = { DR(0), DR(1) } }

> muls.l  d0,d2:d1
# { .size = 4, .operation = M68K_MULS, .operands = { DR(0), DPAIR(1, 2) } }

> mulu.w  d0,d1
# { .size = 2, .operation = M68K_MULU, .operands = { DR(0), DR(1) } }

> mulu.l  d0,d1
# { .size = 4, .operation = M68K_MULU, .operands = { DR(0), DR(1) } }

> mulu.l  d0,d2:d1
# { .size = 4, .operation = M68K_MULU, .operands = { DR(0), DPAIR(1, 2) } }

> nbcd  (a0)+
# { .size = 1, .operation = M68K_NBCD, .operands = { ARINC(0), NO_OPERAND } }

> move sr,d0
# { .size = 2, .operation = M68K_MOVEFROMSR, .operands = { IMPLIED, DR(0) } }

> move d0,sr
# { .size = 2, .operation = M68K_MOVETOSR, .operands = { DR(0), IMPLIED } }

> move a0,usp
# { .size = 4, .operation = M68K_MOVETOUSP, .operands = { AR(0), IMPLIED } }

> move usp,a3
# { .size = 4, .operation = M68K_MOVEFROMUSP, .operands = { IMPLIED, AR(3) } }

> move d0,ccr
# { .size = 2, .operation = M68K_MOVETOCCR, .operands = { DR(0), IMPLIED } }

> move ccr,d0
# { .size = 2, .operation = M68K_MOVEFROMCCR, .operands = { IMPLIED, DR(0) } }

> pea (a0)
# { .size = 4, .operation = M68K_PEA, .operands = { ARIND(0), IMPLIED } }

> movem.w d0-d4/a0-a2,-(a4)
# { .size = 2, .operation = M68K_MOVEM, .operands = { REGLIST(0b1111100011100000), ARDEC(4) } }

> movem.l (a4)+,d0-d4/a0-a2
# { .size = 4, .operation = M68K_MOVEM, .operands = { ARINC(4), REGLIST(0b0000011100011111) } }

> clr.b d0
# { .size = 1, .operation = M68K_CLR, .operands = { IMPLIED, DR(0) } }

> clr.w (a0)+
# { .size = 2, .operation = M68K_CLR, .operands = { IMPLIED, ARINC(0) } }

> clr.l (a4)
# { .size = 4, .operation = M68K_CLR, .operands = { IMPLIED, ARIND(4) } }

> neg.b d0
# { .size = 1, .operation = M68K_NEG, .operands = { IMPLIED, DR(0) } }

> neg.w (a0)+
# { .size = 2, .operation = M68K_NEG, .operands = { IMPLIED, ARINC(0) } }

> neg.l (a4)
# { .size = 4, .operation = M68K_NEG, .operands = { IMPLIED, ARIND(4) } }

> negx.b d0
# { .size = 1, .operation = M68K_NEGX, .operands = { IMPLIED, DR(0) } }

> negx.w (a0)+
# { .size = 2, .operation = M68K_NEGX, .operands = { IMPLIED, ARINC(0) } }

> negx.l (a4)
# { .size = 4, .operation = M68K_NEGX, .operands = { IMPLIED, ARIND(4) } }

> not.b d0
# { .size = 1, .operation = M68K_NOT, .operands = { IMPLIED, DR(0) } }

> not.w (a0)+
# { .size = 2, .operation = M68K_NOT, .operands = { IMPLIED, ARINC(0) } }

> not.l (a4)
# { .size = 4, .operation = M68K_NOT, .operands = { IMPLIED, ARIND(4) } }

> tst.b d0
# { .size = 1, .operation = M68K_TST, .operands = { IMPLIED, DR(0) } }

> tst.w (a0)+
# { .size = 2, .operation = M68K_TST, .operands = { IMPLIED, ARINC(0) } }

> tst.l (a4)
# { .size = 4, .operation = M68K_TST, .operands = { IMPLIED, ARIND(4) } }

> chk.w (a4),d2
# { .size = 2, .operation = M68K_CHK, .operands = { ARIND(4), DR(2) } }

> chk.l (a4),d2
# { .size = 4, .operation = M68K_CHK, .operands = { ARIND(4), DR(2) } }

> bfchg (a4){12:7}
# { .size = 0, .operation = M68K_BFCHG, .operands = { NO_OPERAND, ARIND(4) }, .extra = BF_SS(12, 7) }

> bfchg (a4){d2:7}
# { .size = 0, .operation = M68K_BFCHG, .operands = { NO_OPERAND, ARIND(4) }, .extra = BF_DS(2, 7) }

> bfchg (a4){d2:d3}
# { .size = 0, .operation = M68K_BFCHG, .operands = { NO_OPERAND, ARIND(4) }, .extra = BF_DD(2, 3) }

> bfclr (a4){12:7}
# { .size = 0, .operation = M68K_BFCLR, .operands = { NO_OPERAND, ARIND(4) }, .extra = BF_SS(12, 7) }

> bfexts (a4){12:7},d1
# { .size = 0, .operation = M68K_BFEXTS, .operands = { ARIND(4), DR(1) }, .extra = BF_SS(12, 7) }

> bfextu (a4){12:7},d1
# { .size = 0, .operation = M68K_BFEXTU, .operands = { ARIND(4), DR(1) }, .extra = BF_SS(12, 7) }

> bfffo (a4){12:7},d1
# { .size = 0, .operation = M68K_BFFFO, .operands = { ARIND(4), DR(1) }, .extra = BF_SS(12, 7) }

> bfins d1,(a4){12:7}
# { .size = 0, .operation = M68K_BFINS, .operands = { DR(1), ARIND(4) }, .extra = BF_SS(12, 7) }

> bfset (a4){12:7}
# { .size = 0, .operation = M68K_BFSET, .operands = { NO_OPERAND, ARIND(4) }, .extra = BF_SS(12, 7) }

> bftst (a4){12:7}
# { .size = 0, .operation = M68K_BFTST, .operands = { NO_OPERAND, ARIND(4) }, .extra = BF_SS(12, 7) }

> .self: dbf d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_F) }

> .self: dbhi d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_HI) }

> .self: dbls d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_LS) }

> .self: dbcc d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_CC) }

> .self: dbhs d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_CC) }

> .self: dbcs d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_CS) }

> .self: dblo d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_CS) }

> .self: dbne d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_NE) }

> .self: dbeq d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_EQ) }

> .self: dbvc d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_VC) }

> .self: dbvs d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_VS) }

> .self: dbpl d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_PL) }

> .self: dbmi d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_MI) }

> .self: dbge d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_GE) }

> .self: dblt d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_LT) }

> .self: dbgt d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_GT) }

> .self: dble d3,.self
# { .size = 2, .operation = M68K_DBCC, .operands = { DR(3), PCDISP(2, simple_disp(-2)) }, .extra = CC(M68K_CC_LE) }

> addq.b #1,d0
# { .size = 1, .operation = M68K_ADDQ, .operands = { IMM8(1), DR(0) } }

> addq.w #7,a0
# { .size = 2, .operation = M68K_ADDQ, .operands = { IMM8(7), AR(0) } }

> addq.l #8,d0
# { .size = 4, .operation = M68K_ADDQ, .operands = { IMM8(8), DR(0) } }

> subq.b #1,d0
# { .size = 1, .operation = M68K_SUBQ, .operands = { IMM8(1), DR(0) } }

> subq.w #7,a0
# { .size = 2, .operation = M68K_SUBQ, .operands = { IMM8(7), AR(0) } }

> subq.l #8,d0
# { .size = 4, .operation = M68K_SUBQ, .operands = { IMM8(8), DR(0) } }

> trapne
# { .size = 0, .operation = M68K_TRAPCC, .operands = { NO_OPERAND, NO_OPERAND }, .extra = CC(M68K_CC_NE) }

> trapne.w #1234
# { .size = 2, .operation = M68K_TRAPCC, .operands = { IMM16(1234), NO_OPERAND }, .extra = CC(M68K_CC_NE) }

> trapne.l #$12345678
# { .size = 4, .operation = M68K_TRAPCC, .operands = { IMM32(0x12345678), NO_OPERAND }, .extra = CC(M68K_CC_NE) }

> sne (a0)
# { .size = 1, .operation = M68K_SCC, .operands = { IMPLIED, ARIND(0) }, .extra = CC(M68K_CC_NE) }

> addx.b d0,d1
# { .size = 1, .operation = M68K_ADDX, .operands = { DR(0), DR(1) } }

> addx.w d0,d1
# { .size = 2, .operation = M68K_ADDX, .operands = { DR(0), DR(1) } }

> addx.l d0,d1
# { .size = 4, .operation = M68K_ADDX, .operands = { DR(0), DR(1) } }

> addx.b -(a2),-(a3)
# { .size = 1, .operation = M68K_ADDX, .operands = { ARDEC(2), ARDEC(3) } }

> addx.w -(a2),-(a3)
# { .size = 2, .operation = M68K_ADDX, .operands = { ARDEC(2), ARDEC(3) } }

> addx.l -(a2),-(a3)
# { .size = 4, .operation = M68K_ADDX, .operands = { ARDEC(2), ARDEC(3) } }

> add.b (a2),d0
# { .size = 1, .operation = M68K_ADD, .operands = { ARIND(2), DR(0) } }

> add.w (a2),d0
# { .size = 2, .operation = M68K_ADD, .operands = { ARIND(2), DR(0) } }

> add.l (a2),d0
# { .size = 4, .operation = M68K_ADD, .operands = { ARIND(2), DR(0) } }

> add.b d3,(a2)
# { .size = 1, .operation = M68K_ADD, .operands = { DR(3), ARIND(2) } }

> add.w d3,(a2)
# { .size = 2, .operation = M68K_ADD, .operands = { DR(3), ARIND(2) } }

> add.l d3,(a2)
# { .size = 4, .operation = M68K_ADD, .operands = { DR(3), ARIND(2) } }

> subx.b d0,d1
# { .size = 1, .operation = M68K_SUBX, .operands = { DR(0), DR(1) } }

> subx.w d0,d1
# { .size = 2, .operation = M68K_SUBX, .operands = { DR(0), DR(1) } }

> subx.l d0,d1
# { .size = 4, .operation = M68K_SUBX, .operands = { DR(0), DR(1) } }

> subx.b -(a2),-(a3)
# { .size = 1, .operation = M68K_SUBX, .operands = { ARDEC(2), ARDEC(3) } }

> subx.w -(a2),-(a3)
# { .size = 2, .operation = M68K_SUBX, .operands = { ARDEC(2), ARDEC(3) } }

> subx.l -(a2),-(a3)
# { .size = 4, .operation = M68K_SUBX, .operands = { ARDEC(2), ARDEC(3) } }

> sub.b (a2),d0
# { .size = 1, .operation = M68K_SUB, .operands = { ARIND(2), DR(0) } }

> sub.w (a2),d0
# { .size = 2, .operation = M68K_SUB, .operands = { ARIND(2), DR(0) } }

> sub.l (a2),d0
# { .size = 4, .operation = M68K_SUB, .operands = { ARIND(2), DR(0) } }

> sub.b d3,(a2)
# { .size = 1, .operation = M68K_SUB, .operands = { DR(3), ARIND(2) } }

> sub.w d3,(a2)
# { .size = 2, .operation = M68K_SUB, .operands = { DR(3), ARIND(2) } }

> sub.l d3,(a2)
# { .size = 4, .operation = M68K_SUB, .operands = { DR(3), ARIND(2) } }

> suba.w d3,a2
# { .size = 2, .operation = M68K_SUBA, .operands = { DR(3), AR(2) } }

> suba.l d3,a2
# { .size = 4, .operation = M68K_SUBA, .operands = { DR(3), AR(2) } }

> cmpa.w (a1),a2
# { .size = 2, .operation = M68K_CMPA, .operands = { ARIND(1), AR(2) } }

> cmpa.l (a1),a2
# { .size = 4, .operation = M68K_CMPA, .operands = { ARIND(1), AR(2) } }

> cmpm.b (a0)+,(a2)+
# { .size = 1, .operation = M68K_CMPM, .operands = { ARINC(0), ARINC(2) } }

> cmpm.w (a0)+,(a2)+
# { .size = 2, .operation = M68K_CMPM, .operands = { ARINC(0), ARINC(2) } }

> cmpm.l (a0)+,(a2)+
# { .size = 4, .operation = M68K_CMPM, .operands = { ARINC(0), ARINC(2) } }

> cmp.b (a0)+,d7
# { .size = 1, .operation = M68K_CMP, .operands = { ARINC(0), DR(7) } }

> cmp.w (a0)+,d7
# { .size = 2, .operation = M68K_CMP, .operands = { ARINC(0), DR(7) } }

> cmp.l (a0)+,d7
# { .size = 4, .operation = M68K_CMP, .operands = { ARINC(0), DR(7) } }

> eor.b d7,(a0)+
# { .size = 1, .operation = M68K_EOR, .operands = { DR(7), ARINC(0) } }

> eor.w d7,(a0)+
# { .size = 2, .operation = M68K_EOR, .operands = { DR(7), ARINC(0) } }

> eor.l d7,-(a0)
# { .size = 4, .operation = M68K_EOR, .operands = { DR(7), ARDEC(0) } }

> lab:
>   bra.s lab
# { .size = 1, .operation = M68K_BRA, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND } }

> lab:
>   bra.w lab
# { .size = 2, .operation = M68K_BRA, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND } }

> lab:
>   bra.l lab
# { .size = 4, .operation = M68K_BRA, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND } }

> lab:
>   bsr.s lab
# { .size = 1, .operation = M68K_BSR, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND } }

> lab:
>   bsr.w lab
# { .size = 2, .operation = M68K_BSR, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND } }

> lab:
>   bsr.l lab
# { .size = 4, .operation = M68K_BSR, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND } }

> lab:
>   bne.s lab
# { .size = 1, .operation = M68K_BCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = CC(M68K_CC_NE), }

> lab:
>   beq.w lab
# { .size = 2, .operation = M68K_BCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = CC(M68K_CC_EQ) }

> lab:
>   bcs.l lab
# { .size = 4, .operation = M68K_BCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = CC(M68K_CC_CS) }

> pack d0,d1,#12
# { .size = 0, .operation = M68K_PACK, .operands = { DR(0), DR(1) }, .extra = PACKADJ(12) }

> unpk d0,d1,#12
# { .size = 0, .operation = M68K_UNPK, .operands = { DR(0), DR(1) }, .extra = PACKADJ(12) }

> pack -(a0),-(a1),#37
# { .size = 0, .operation = M68K_PACK, .operands = { ARDEC(0), ARDEC(1) }, .extra = PACKADJ(37) }

> unpk -(a0),-(a1),#37
# { .size = 0, .operation = M68K_UNPK, .operands = { ARDEC(0), ARDEC(1) }, .extra = PACKADJ(37) }

> sbcd -(a0),-(a1)
# { .size = 1, .operation = M68K_SBCD, .operands = { ARDEC(0), ARDEC(1) } }

> sbcd d3,d4
# { .size = 1, .operation = M68K_SBCD, .operands = { DR(3), DR(4) } }

> or.b (a0)+,d0
# { .size = 1, .operation = M68K_OR, .operands = { ARINC(0), DR(0) } }

> or.w (a0)+,d0
# { .size = 2, .operation = M68K_OR, .operands = { ARINC(0), DR(0) } }

> or.l (a0)+,d0
# { .size = 4, .operation = M68K_OR, .operands = { ARINC(0), DR(0) } }

> or.b d0,(a0)+
# { .size = 1, .operation = M68K_OR, .operands = { DR(0), ARINC(0) } }

> or.w d0,(a0)+
# { .size = 2, .operation = M68K_OR, .operands = { DR(0), ARINC(0) } }

> or.l d0,(a0)+
# { .size = 4, .operation = M68K_OR, .operands = { DR(0), ARINC(0) } }

> exg d0,d5
# { .size = 4, .operation = M68K_EXG, .operands = { DR(0), DR(5) } }

> exg a0,a5
# { .size = 4, .operation = M68K_EXG, .operands = { AR(0), AR(5) } }

> exg d3,a5
# { .size = 4, .operation = M68K_EXG, .operands = { DR(3), AR(5) } }

> and.b (a0)+,d0
# { .size = 1, .operation = M68K_AND, .operands = { ARINC(0), DR(0) } }

> and.w (a0)+,d0
# { .size = 2, .operation = M68K_AND, .operands = { ARINC(0), DR(0) } }

> and.l (a0)+,d0
# { .size = 4, .operation = M68K_AND, .operands = { ARINC(0), DR(0) } }

> and.b d0,(a0)+
# { .size = 1, .operation = M68K_AND, .operands = { DR(0), ARINC(0) } }

> and.w d0,(a0)+
# { .size = 2, .operation = M68K_AND, .operands = { DR(0), ARINC(0) } }

> and.l d0,(a0)+
# { .size = 4, .operation = M68K_AND, .operands = { DR(0), ARINC(0) } }

> asl.b #3,d7
# { .size = 1, .operation = M68K_ASL, .operands = { IMM8(3), DR(7) } }

> asl.w #3,d7
# { .size = 2, .operation = M68K_ASL, .operands = { IMM8(3), DR(7) } }

> asl.l #3,d7
# { .size = 4, .operation = M68K_ASL, .operands = { IMM8(3), DR(7) } }

> asr.b #3,d7
# { .size = 1, .operation = M68K_ASR, .operands = { IMM8(3), DR(7) } }

> asr.w #3,d7
# { .size = 2, .operation = M68K_ASR, .operands = { IMM8(3), DR(7) } }

> asr.l #3,d7
# { .size = 4, .operation = M68K_ASR, .operands = { IMM8(3), DR(7) } }

> asl.b d1,d7
# { .size = 1, .operation = M68K_ASL, .operands = { DR(1), DR(7) } }

> asl.w d1,d7
# { .size = 2, .operation = M68K_ASL, .operands = { DR(1), DR(7) } }

> asl.l d1,d7
# { .size = 4, .operation = M68K_ASL, .operands = { DR(1), DR(7) } }

> asr.b d1,d7
# { .size = 1, .operation = M68K_ASR, .operands = { DR(1), DR(7) } }

> asr.w d1,d7
# { .size = 2, .operation = M68K_ASR, .operands = { DR(1), DR(7) } }

> asr.l d1,d7
# { .size = 4, .operation = M68K_ASR, .operands = { DR(1), DR(7) } }

> asl.w (a0)
# { .size = 2, .operation = M68K_ASL, .operands = { IMPLIED, ARIND(0) } }

> asr.w (a0)
# { .size = 2, .operation = M68K_ASR, .operands = { IMPLIED, ARIND(0) } }

> lsl.b #3,d7
# { .size = 1, .operation = M68K_LSL, .operands = { IMM8(3), DR(7) } }

> lsl.w #3,d7
# { .size = 2, .operation = M68K_LSL, .operands = { IMM8(3), DR(7) } }

> lsl.l #3,d7
# { .size = 4, .operation = M68K_LSL, .operands = { IMM8(3), DR(7) } }

> lsr.b #3,d7
# { .size = 1, .operation = M68K_LSR, .operands = { IMM8(3), DR(7) } }

> lsr.w #3,d7
# { .size = 2, .operation = M68K_LSR, .operands = { IMM8(3), DR(7) } }

> lsr.l #3,d7
# { .size = 4, .operation = M68K_LSR, .operands = { IMM8(3), DR(7) } }

> lsl.b d1,d7
# { .size = 1, .operation = M68K_LSL, .operands = { DR(1), DR(7) } }

> lsl.w d1,d7
# { .size = 2, .operation = M68K_LSL, .operands = { DR(1), DR(7) } }

> lsl.l d1,d7
# { .size = 4, .operation = M68K_LSL, .operands = { DR(1), DR(7) } }

> lsr.b d1,d7
# { .size = 1, .operation = M68K_LSR, .operands = { DR(1), DR(7) } }

> lsr.w d1,d7
# { .size = 2, .operation = M68K_LSR, .operands = { DR(1), DR(7) } }

> lsr.l d1,d7
# { .size = 4, .operation = M68K_LSR, .operands = { DR(1), DR(7) } }

> lsl.w (a0)
# { .size = 2, .operation = M68K_LSL, .operands = { IMPLIED, ARIND(0) } }

> lsr.w (a0)
# { .size = 2, .operation = M68K_LSR, .operands = { IMPLIED, ARIND(0) } }

> roxl.b #3,d7
# { .size = 1, .operation = M68K_ROXL, .operands = { IMM8(3), DR(7) } }

> roxl.w #3,d7
# { .size = 2, .operation = M68K_ROXL, .operands = { IMM8(3), DR(7) } }

> roxl.l #3,d7
# { .size = 4, .operation = M68K_ROXL, .operands = { IMM8(3), DR(7) } }

> roxr.b #3,d7
# { .size = 1, .operation = M68K_ROXR, .operands = { IMM8(3), DR(7) } }

> roxr.w #3,d7
# { .size = 2, .operation = M68K_ROXR, .operands = { IMM8(3), DR(7) } }

> roxr.l #3,d7
# { .size = 4, .operation = M68K_ROXR, .operands = { IMM8(3), DR(7) } }

> roxl.b d1,d7
# { .size = 1, .operation = M68K_ROXL, .operands = { DR(1), DR(7) } }

> roxl.w d1,d7
# { .size = 2, .operation = M68K_ROXL, .operands = { DR(1), DR(7) } }

> roxl.l d1,d7
# { .size = 4, .operation = M68K_ROXL, .operands = { DR(1), DR(7) } }

> roxr.b d1,d7
# { .size = 1, .operation = M68K_ROXR, .operands = { DR(1), DR(7) } }

> roxr.w d1,d7
# { .size = 2, .operation = M68K_ROXR, .operands = { DR(1), DR(7) } }

> roxr.l d1,d7
# { .size = 4, .operation = M68K_ROXR, .operands = { DR(1), DR(7) } }

> roxl.w (a0)
# { .size = 2, .operation = M68K_ROXL, .operands = { IMPLIED, ARIND(0) } }

> roxr.w (a0)
# { .size = 2, .operation = M68K_ROXR, .operands = { IMPLIED, ARIND(0) } }

> rol.b #3,d7
# { .size = 1, .operation = M68K_ROL, .operands = { IMM8(3), DR(7) } }

> rol.w #3,d7
# { .size = 2, .operation = M68K_ROL, .operands = { IMM8(3), DR(7) } }

> rol.l #3,d7
# { .size = 4, .operation = M68K_ROL, .operands = { IMM8(3), DR(7) } }

> ror.b #3,d7
# { .size = 1, .operation = M68K_ROR, .operands = { IMM8(3), DR(7) } }

> ror.w #3,d7
# { .size = 2, .operation = M68K_ROR, .operands = { IMM8(3), DR(7) } }

> ror.l #3,d7
# { .size = 4, .operation = M68K_ROR, .operands = { IMM8(3), DR(7) } }

> rol.b d1,d7
# { .size = 1, .operation = M68K_ROL, .operands = { DR(1), DR(7) } }

> rol.w d1,d7
# { .size = 2, .operation = M68K_ROL, .operands = { DR(1), DR(7) } }

> rol.l d1,d7
# { .size = 4, .operation = M68K_ROL, .operands = { DR(1), DR(7) } }

> ror.b d1,d7
# { .size = 1, .operation = M68K_ROR, .operands = { DR(1), DR(7) } }

> ror.w d1,d7
# { .size = 2, .operation = M68K_ROR, .operands = { DR(1), DR(7) } }

> ror.l d1,d7
# { .size = 4, .operation = M68K_ROR, .operands = { DR(1), DR(7) } }

> rol.w (a0)
# { .size = 2, .operation = M68K_ROL, .operands = { IMPLIED, ARIND(0) } }

> ror.w (a0)
# { .size = 2, .operation = M68K_ROR, .operands = { IMPLIED, ARIND(0) } }

> moveq #-1,d2
# { .size = 4, .operation = M68K_MOVEQ, .operands = { IMM8(0xff), DR(2) } }

> moveq #127,d5
# { .size = 4, .operation = M68K_MOVEQ, .operands = { IMM8(0x7f), DR(5) } }

> fabs fp1
# { .size = 10, .operation = M68K_FABS, .operands = { FR(1), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsabs fp1
# { .size = 10, .operation = M68K_FSABS, .operands = { FR(1), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fdabs fp1
# { .size = 10, .operation = M68K_FDABS, .operands = { FR(1), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fabs.l (a0),fp1
# { .size = 4, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_LONG_INT) }

> fabs.s (a0),fp1
# { .size = 4, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fabs.d (a0),fp1
# { .size = 8, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_DOUBLE) }

> fabs.w (a0),fp1
# { .size = 2, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_WORD_INT) }

> fabs.b (a0),fp1
# { .size = 1, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_BYTE_INT) }

> fabs.x (a0),fp1
# { .size = 10, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fabs.p (a0),fp1
# { .size = 12, .operation = M68K_FABS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT_K(M68K_FPF_PACKED_DECIMAL_REAL_STATIC, 0) }

> fabs fp3,fp1
# { .size = 10, .operation = M68K_FABS, .operands = { FR(3), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> facos fp0,fp1
# { .size = 10, .operation = M68K_FACOS, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> facos.s (a6),fp1
# { .size = 4, .operation = M68K_FACOS, .operands = { ARIND(6), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fadd fp0,fp1
# { .size = 10, .operation = M68K_FADD, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsadd.s (a6),fp1
# { .size = 4, .operation = M68K_FSADD, .operands = { ARIND(6), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fdadd.d (a6),fp1
# { .size = 8, .operation = M68K_FDADD, .operands = { ARIND(6), FR(1) }, .extra = FPFORMAT(M68K_FPF_DOUBLE) }

> fasin fp3
# { .size = 10, .operation = M68K_FASIN, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fasin fp0,fp1
# { .size = 10, .operation = M68K_FASIN, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fasin.s (a0),fp1
# { .size = 4, .operation = M68K_FASIN, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fatan fp3
# { .size = 10, .operation = M68K_FATAN, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fatan fp0,fp1
# { .size = 10, .operation = M68K_FATAN, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fatan.s (a0),fp1
# { .size = 4, .operation = M68K_FATAN, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fatanh fp3
# { .size = 10, .operation = M68K_FATANH, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fatanh fp0,fp1
# { .size = 10, .operation = M68K_FATANH, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fatanh.s (a0),fp1
# { .size = 4, .operation = M68K_FATANH, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> lab: fbne.l lab
# { .size = 4, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NE) }

> lab: fbf.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_F) }

> lab: fbeq.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_EQ) }

> lab: fbogt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_OGT) }

> lab: fboge.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_OGE) }

> lab: fbolt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_OLT) }

> lab: fbole.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_OLE) }

> lab: fbogl.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_OGL) }

> lab: fbor.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_OR) }

> lab: fbun.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_UN) }

> lab: fbueq.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_UEQ) }

> lab: fbugt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_UGT) }

> lab: fbuge.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_UGE) }

> lab: fbult.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_ULT) }

> lab: fbule.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_ULE) }

> lab: fbne.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NE) }

> lab: fbt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_T) }

> lab: fbsf.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_SF) }

> lab: fbseq.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_SEQ) }

> lab: fbgt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_GT) }

> lab: fbge.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_GE) }

> lab: fblt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_LT) }

> lab: fble.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_LE) }

> lab: fbgl.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_GL) }

> lab: fbgle.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_GLE) }

> lab: fbngle.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NGLE) }

> lab: fbngl.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NGL) }

> lab: fbnle.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NLE) }

> lab: fbnlt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NLT) }

> lab: fbnge.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NGE) }

> lab: fbngt.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_NGT) }

> lab: fbsne.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_SNE) }

> lab: fbst.w lab
# { .size = 2, .operation = M68K_FBCC, .operands = { PCDISP(2, simple_disp(-2)), NO_OPERAND }, .extra = FPCC(M68K_FPCC_ST) }

> fcmp fp2,fp4
# { .size = 10, .operation = M68K_FCMP, .operands = { FR(2), FR(4) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fcmp.s (a0),fp4
# { .size = 4, .operation = M68K_FCMP, .operands = { ARIND(0), FR(4) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fcos fp3
# { .size = 10, .operation = M68K_FCOS, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fcos fp0,fp1
# { .size = 10, .operation = M68K_FCOS, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fcos.s (a0),fp1
# { .size = 4, .operation = M68K_FCOS, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fcosh fp3
# { .size = 10, .operation = M68K_FCOSH, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fcosh fp0,fp1
# { .size = 10, .operation = M68K_FCOSH, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fcosh.s (a0),fp1
# { .size = 4, .operation = M68K_FCOSH, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fdiv fp0,fp1
# { .size = 10, .operation = M68K_FDIV, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fdiv.s (a0),fp1
# { .size = 4, .operation = M68K_FDIV, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsdiv.s (a0),fp1
# { .size = 4, .operation = M68K_FSDIV, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fddiv.s (a0),fp1
# { .size = 4, .operation = M68K_FDDIV, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fetox fp3
# { .size = 10, .operation = M68K_FETOX, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fetox fp0,fp1
# { .size = 10, .operation = M68K_FETOX, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fetox.s (a0),fp1
# { .size = 4, .operation = M68K_FETOX, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fetoxm1 fp3
# { .size = 10, .operation = M68K_FETOXM1, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fetoxm1 fp0,fp1
# { .size = 10, .operation = M68K_FETOXM1, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fetoxm1.s (a0),fp1
# { .size = 4, .operation = M68K_FETOXM1, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fgetexp fp3
# { .size = 10, .operation = M68K_FGETEXP, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fgetexp fp0,fp1
# { .size = 10, .operation = M68K_FGETEXP, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fgetexp.s (a0),fp1
# { .size = 4, .operation = M68K_FGETEXP, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fgetman fp3
# { .size = 10, .operation = M68K_FGETMAN, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fgetman fp0,fp1
# { .size = 10, .operation = M68K_FGETMAN, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fgetman.s (a0),fp1
# { .size = 4, .operation = M68K_FGETMAN, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fint fp3
# { .size = 10, .operation = M68K_FINT, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fint fp0,fp1
# { .size = 10, .operation = M68K_FINT, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fint.s (a0),fp1
# { .size = 4, .operation = M68K_FINT, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fintrz fp3
# { .size = 10, .operation = M68K_FINTRZ, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fintrz fp0,fp1
# { .size = 10, .operation = M68K_FINTRZ, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fintrz.s (a0),fp1
# { .size = 4, .operation = M68K_FINTRZ, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> flog10 fp3
# { .size = 10, .operation = M68K_FLOG10, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flog10 fp0,fp1
# { .size = 10, .operation = M68K_FLOG10, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flog10.s (a0),fp1
# { .size = 4, .operation = M68K_FLOG10, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> flog2 fp3
# { .size = 10, .operation = M68K_FLOG2, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flog2 fp0,fp1
# { .size = 10, .operation = M68K_FLOG2, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flog2.s (a0),fp1
# { .size = 4, .operation = M68K_FLOG2, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> flogn fp3
# { .size = 10, .operation = M68K_FLOGN, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flogn fp0,fp1
# { .size = 10, .operation = M68K_FLOGN, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flogn.s (a0),fp1
# { .size = 4, .operation = M68K_FLOGN, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> flognp1 fp3
# { .size = 10, .operation = M68K_FLOGNP1, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flognp1 fp0,fp1
# { .size = 10, .operation = M68K_FLOGNP1, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> flognp1.s (a0),fp1
# { .size = 4, .operation = M68K_FLOGNP1, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fmod fp0,fp1
# { .size = 10, .operation = M68K_FMOD, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmod.s (a0),fp1
# { .size = 4, .operation = M68K_FMOD, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fmovecr #30,fp1
# { .size = 10, .operation = M68K_FMOVECR, .operands = { IMM8(30), FR(1) } }

> lab: fdbgt d6,lab
# { .size = 2, .operation = M68K_FDBCC, .operands = { DR(6), PCDISP(4, simple_disp(-4)) }, .extra = FPCC(M68K_FPCC_GT) }

> fmove fp3,fp5
# { .size = 10, .operation = M68K_FMOVE, .operands = { FR(3), FR(5) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmove.x (a0),fp5
# { .size = 10, .operation = M68K_FMOVE, .operands = { ARIND(0), FR(5) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmove.s (a0),fp5
# { .size = 4, .operation = M68K_FMOVE, .operands = { ARIND(0), FR(5) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsmove.d (a0),fp5
# { .size = 8, .operation = M68K_FSMOVE, .operands = { ARIND(0), FR(5) }, .extra = FPFORMAT(M68K_FPF_DOUBLE) }

> fdmove.p (a0),fp5
# { .size = 12, .operation = M68K_FDMOVE, .operands = { ARIND(0), FR(5) }, .extra = FPFORMAT_K(M68K_FPF_PACKED_DECIMAL_REAL_STATIC, 0) }

> fmove.s fp4,(a1)
# { .size = 4, .operation = M68K_FMOVE, .operands = { FR(4), ARIND(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fmove.p fp4,(a1){#12}
# { .size = 12, .operation = M68K_FMOVE, .operands = { FR(4), ARIND(1) }, .extra = FPFORMAT_K(M68K_FPF_PACKED_DECIMAL_REAL_STATIC, 12) }

> fmove.p fp4,(a1){#-64}
# { .size = 12, .operation = M68K_FMOVE, .operands = { FR(4), ARIND(1) }, .extra = FPFORMAT_K(M68K_FPF_PACKED_DECIMAL_REAL_STATIC, -64) }

> fmove.p fp4,(a1){#63}
# { .size = 12, .operation = M68K_FMOVE, .operands = { FR(4), ARIND(1) }, .extra = FPFORMAT_K(M68K_FPF_PACKED_DECIMAL_REAL_STATIC, 63) }

> fmove.p fp4,(a1){d3}
# { .size = 12, .operation = M68K_FMOVE, .operands = { FR(4), ARIND(1) }, .extra = FPFORMAT_K(M68K_FPF_PACKED_DECIMAL_REAL_DYNAMIC, 3) }

> fmovem.x fp0-fp4,-(a3)
# { .size = 10, .operation = M68K_FMOVEM, .operands = { REGLIST(0x1f), ARDEC(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmovem.x d7,-(a3)
# { .size = 10, .operation = M68K_FMOVEM, .operands = { DR(7), ARDEC(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmovem.x d7,(a3)
# { .size = 10, .operation = M68K_FMOVEM, .operands = { DR(7), ARIND(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmovem.x (a3),d7
# { .size = 10, .operation = M68K_FMOVEM, .operands = { ARIND(3), DR(7) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmovem.x (a3)+,d7
# { .size = 10, .operation = M68K_FMOVEM, .operands = { ARINC(3), DR(7) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmovem.x (a3)+,fp0/fp6
# { .size = 10, .operation = M68K_FMOVEM, .operands = { ARINC(3), REGLIST(/*0b1000_0010*/ 0x82) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmul fp0,fp1
# { .size = 10, .operation = M68K_FMUL, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fmul.s (a0),fp1
# { .size = 4, .operation = M68K_FMUL, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsmul.s (a0),fp1
# { .size = 4, .operation = M68K_FSMUL, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fdmul.s (a0),fp1
# { .size = 4, .operation = M68K_FDMUL, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fneg fp3
# { .size = 10, .operation = M68K_FNEG, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fneg fp0,fp1
# { .size = 10, .operation = M68K_FNEG, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fneg.s (a0),fp1
# { .size = 4, .operation = M68K_FNEG, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsneg.s (a0),fp1
# { .size = 4, .operation = M68K_FSNEG, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fdneg.s (a0),fp1
# { .size = 4, .operation = M68K_FDNEG, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fnop
# { .size = 0, .operation = M68K_FNOP, .operands = { NO_OPERAND, NO_OPERAND } }

> frem fp0,fp1
# { .size = 10, .operation = M68K_FREM, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> frem.s (a0),fp1
# { .size = 4, .operation = M68K_FREM, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fscale fp0,fp1
# { .size = 10, .operation = M68K_FSCALE, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fscale.s (a0),fp1
# { .size = 4, .operation = M68K_FSCALE, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsgt (a0)
# { .size = 1, .operation = M68K_FSCC, .operands = { IMPLIED, ARIND(0) }, .extra = FPCC(M68K_FPCC_GT) }

> fsgldiv fp0,fp1
# { .size = 10, .operation = M68K_FSGLDIV, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsgldiv.s (a0),fp1
# { .size = 4, .operation = M68K_FSGLDIV, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsglmul fp0,fp1
# { .size = 10, .operation = M68K_FSGLMUL, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsglmul.s (a0),fp1
# { .size = 4, .operation = M68K_FSGLMUL, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsin fp3
# { .size = 10, .operation = M68K_FSIN, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsin fp0,fp1
# { .size = 10, .operation = M68K_FSIN, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsin.s (a0),fp1
# { .size = 4, .operation = M68K_FSIN, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsincos fp0,fp1:fp2
# { .size = 10, .operation = M68K_FSINCOS, .operands = { FR(0), FPAIR(2,1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsincos.s (a0),fp1:fp2
# { .size = 4, .operation = M68K_FSINCOS, .operands = { ARIND(0), FPAIR(2,1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsinh fp3
# { .size = 10, .operation = M68K_FSINH, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsinh fp0,fp1
# { .size = 10, .operation = M68K_FSINH, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsinh.s (a0),fp1
# { .size = 4, .operation = M68K_FSINH, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fsqrt fp3
# { .size = 10, .operation = M68K_FSQRT, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsqrt fp0,fp1
# { .size = 10, .operation = M68K_FSQRT, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsqrt.s (a0),fp1
# { .size = 4, .operation = M68K_FSQRT, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fssqrt fp3
# { .size = 10, .operation = M68K_FSSQRT, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fdsqrt fp3
# { .size = 10, .operation = M68K_FDSQRT, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsub fp0,fp1
# { .size = 10, .operation = M68K_FSUB, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fsub.s (a0),fp1
# { .size = 4, .operation = M68K_FSUB, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> fssub.x (a0),fp1
# { .size = 10, .operation = M68K_FSSUB, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> fdsub.l (a0),fp1
# { .size = 4, .operation = M68K_FDSUB, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_LONG_INT) }


> ftan fp3
# { .size = 10, .operation = M68K_FTAN, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftan fp0,fp1
# { .size = 10, .operation = M68K_FTAN, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftan.s (a0),fp1
# { .size = 4, .operation = M68K_FTAN, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }


> ftanh fp3
# { .size = 10, .operation = M68K_FTANH, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftanh fp0,fp1
# { .size = 10, .operation = M68K_FTANH, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftanh.s (a0),fp1
# { .size = 4, .operation = M68K_FTANH, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }


> ftentox fp3
# { .size = 10, .operation = M68K_FTENTOX, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftentox fp0,fp1
# { .size = 10, .operation = M68K_FTENTOX, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftentox.s (a0),fp1
# { .size = 4, .operation = M68K_FTENTOX, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> ftrapgt
# { .size = 0, .operation = M68K_FTRAPCC, .operands = { IMPLIED, NO_OPERAND }, .extra = FPCC(M68K_FPCC_GT) }

> ftrapeq.w #123
# { .size = 2, .operation = M68K_FTRAPCC, .operands = { IMPLIED, IMM16(123) }, .extra = FPCC(M68K_FPCC_EQ) }

> ftrapne.l #1234567
# { .size = 4, .operation = M68K_FTRAPCC, .operands = { IMPLIED, IMM32(1234567) }, .extra = FPCC(M68K_FPCC_NE) }

> ftst.l (a0)
# { .size = 4, .operation = M68K_FTST, .operands = { ARIND(0), NO_OPERAND }, .extra = FPFORMAT(M68K_FPF_LONG_INT) }

> ftst fp7
# { .size = 10, .operation = M68K_FTST, .operands = { FR(7), NO_OPERAND }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftwotox fp3
# { .size = 10, .operation = M68K_FTWOTOX, .operands = { FR(3), FR(3) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftwotox fp0,fp1
# { .size = 10, .operation = M68K_FTWOTOX, .operands = { FR(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_EXTENDED_REAL) }

> ftwotox.s (a0),fp1
# { .size = 4, .operation = M68K_FTWOTOX, .operands = { ARIND(0), FR(1) }, .extra = FPFORMAT(M68K_FPF_SINGLE) }

> movec.l a3,cacr
# { .size = 4, .operation = M68K_MOVEC, .operands = { AR(3), CONTROLREG(2) } }

> movec.l d3,cacr
# { .size = 4, .operation = M68K_MOVEC, .operands = { DR(3), CONTROLREG(2) } }

> movec.l isp,a3
# { .size = 4, .operation = M68K_MOVEC, .operands = { CONTROLREG(0x804), AR(3) } }

> movec.l isp,d3
# { .size = 4, .operation = M68K_MOVEC, .operands = { CONTROLREG(0x804), DR(3) } }

> adda.w (a3),a2
# { .size = 2, .operation = M68K_ADDA, .operands = { ARIND(3), AR(2) } }

> adda.l (a3),a2
# { .size = 4, .operation = M68K_ADDA, .operands = { ARIND(3), AR(2) } }

