> move.b d0,d1
# Instruction { size: 1, operation: MOVE, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> move.b d2,d3
# Instruction { size: 1, operation: MOVE, operands: [ DR(D2), DR(D3) ], extra: NoExtra }

> move.b d4,d5
# Instruction { size: 1, operation: MOVE, operands: [ DR(D4), DR(D5) ], extra: NoExtra }

> move.b d6,d7
# Instruction { size: 1, operation: MOVE, operands: [ DR(D6), DR(D7) ], extra: NoExtra }

> move.w a0,a1
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A0), AR(A1) ], extra: NoExtra }

> move.w a2,a3
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A2), AR(A3) ], extra: NoExtra }

> move.w a4,a5
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A4), AR(A5) ], extra: NoExtra }

> move.w a6,a7
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A6), AR(A7) ], extra: NoExtra }

> move.b 123(a0,d0),d3 
# Instruction { size: 1, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ], extra: NoExtra }

> move.w 123(a0,d0),d3 
# Instruction { size: 2, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ], extra: NoExtra }

> move.l 123(a0,d0),d3 
# Instruction { size: 4, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ], extra: NoExtra }

> move.l 123(a0,d0),a1 
# Instruction { size: 4, operation: MOVEA, operands: [ ARDISP(A0, dr_disp(D0, 123)), AR(A1) ], extra: NoExtra }

> move.w 123(a0,d0),a1 
# Instruction { size: 2, operation: MOVEA, operands: [ ARDISP(A0, dr_disp(D0, 123)), AR(A1) ], extra: NoExtra }

> move.b #$12,d7 
# Instruction { size: 1, operation: MOVE, operands: [ IMM8(0x12), DR(D7) ], extra: NoExtra }

> move.w #$1234,d7 
# Instruction { size: 2, operation: MOVE, operands: [ IMM16(0x1234), DR(D7) ], extra: NoExtra }

> move.l #$12345678,d7 
# Instruction { size: 4, operation: MOVE, operands: [ IMM32(0x12345678), DR(D7) ], extra: NoExtra }

> move.l D1,-(A2)
# Instruction { size: 4, operation: MOVE, operands: [ DR(D1), ARDEC(A2) ], extra: NoExtra }

> move.l D1,(A2)+
# Instruction { size: 4, operation: MOVE, operands: [ DR(D1), ARINC(A2) ], extra: NoExtra }

> move.l -(A4),(A2)+
# Instruction { size: 4, operation: MOVE, operands: [ ARDEC(A4), ARINC(A2) ], extra: NoExtra }

> move.l 4.w,A0
# Instruction { size: 4, operation: MOVEA, operands: [ ABS16(4), AR(A0) ], extra: NoExtra }

> move.l $11223344,A0
# Instruction { size: 4, operation: MOVEA, operands: [ ABS32(0x11223344), AR(A0) ], extra: NoExtra }

> move.w #$1234,123(d0)
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     IMM16(0x1234),
#     DISP(Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::DR(D0, 0),
#       indirection: NoIndirection,
#      })
#    ],
#    extra: NoExtra
#  }

> move.w -8(pc),d3
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: -8,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     DR(D3),
#   ],
#   extra: NoExtra
# }

> move.w -8(pc,d2*8),d3
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: -8,
#       outer_displacement: 0,
#       indexer: Indexer::DR(D2, 3),
#       indirection: NoIndirection,
#     }),
#     DR(D3),
#   ],
#   extra: NoExtra
# }

> move.w 123(a1,d2*4),9876(a2,d3*2)
# Instruction {
#   size: 2,
#   operation: MOVE,
#   operands: [
#     ARDISP(A1, dr_disp_scale(D2, 123, 2)),
#     ARDISP(A2, dr_disp_scale(D3, 9876, 1))
#   ],
#   extra: NoExtra
# }

> move.w d0,12345(a0,a1*2)
# Instruction {
#   size: 2,
#   operation: MOVE,
#   operands: [
#     DR(D0),
#     ARDISP(A0, Displacement {
#       base_displacement: 12345,
#       outer_displacement: 0,
#       indexer: Indexer::AR(A1, 1),
#       indirection: NoIndirection,
#     })
#   ],
#   extra: NoExtra
# }

> lea (a0),a1
# Instruction { size: 4, operation: LEA, operands: [ ARIND(A0), AR(A1) ], extra: NoExtra }

> lea 8(a0),a1
# Instruction { size: 4, operation: LEA, operands: [ ARDISP(A0, simple_disp(8)), AR(A1) ], extra: NoExtra  }

> ori #17,ccr
# Instruction { size: 1, operation: ORITOCCR, operands: [ IMM8(17), Implied ], extra: NoExtra  }

> ori #$1234,sr
# Instruction { size: 2, operation: ORITOSR, operands: [ IMM16(0x1234), Implied ], extra: NoExtra  }

> ori.w #$1234,d0
# Instruction { size: 2, operation: ORI, operands: [ IMM16(0x1234), DR(D0) ], extra: NoExtra  }

> ori.b #$12,d2
# Instruction { size: 1, operation: ORI, operands: [ IMM8(0x12), DR(D2) ], extra: NoExtra  }

> ori.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: ORI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ], extra: NoExtra  }

> ori.l #$12345678,-(a0)
# Instruction { size: 4, operation: ORI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra  }

> andi #17,ccr
# Instruction { size: 1, operation: ANDITOCCR, operands: [ IMM8(17), Implied ], extra: NoExtra  }

> andi #$1234,sr
# Instruction { size: 2, operation: ANDITOSR, operands: [ IMM16(0x1234), Implied ], extra: NoExtra  }

> andi.w #$1234,d0
# Instruction { size: 2, operation: ANDI, operands: [ IMM16(0x1234), DR(D0) ], extra: NoExtra  }

> andi.b #$12,d2
# Instruction { size: 1, operation: ANDI, operands: [ IMM8(0x12), DR(D2) ], extra: NoExtra  }

> andi.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: ANDI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ], extra: NoExtra  }

> andi.l #$12345678,-(a0)
# Instruction { size: 4, operation: ANDI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra  }

> eori #17,ccr
# Instruction { size: 1, operation: EORITOCCR, operands: [ IMM8(17), Implied ], extra: NoExtra  }

> eori #$1234,sr
# Instruction { size: 2, operation: EORITOSR, operands: [ IMM16(0x1234), Implied ], extra: NoExtra  }

> eori.w #$1234,d0
# Instruction { size: 2, operation: EORI, operands: [ IMM16(0x1234), DR(D0) ], extra: NoExtra  }

> eori.b #$12,d2
# Instruction { size: 1, operation: EORI, operands: [ IMM8(0x12), DR(D2) ], extra: NoExtra  }

> eori.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: EORI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ], extra: NoExtra  }

> eori.l #$12345678,-(a0)
# Instruction { size: 4, operation: EORI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra }

> addi.l #$12345678,-(a0)
# Instruction { size: 4, operation: ADDI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra }

> subi.l #$12345678,-(a0)
# Instruction { size: 4, operation: SUBI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra }

! 68020
> rtm d3
# Instruction { size: 0, operation: RTM, operands: [ DR(D3), NoOperand ], extra: NoExtra }

! 68020
> rtm a1
# Instruction { size: 0, operation: RTM, operands: [ AR(A1), NoOperand ], extra: NoExtra }

! 68020
> callm #3,(a1)
# Instruction { size: 0, operation: CALLM, operands: [ IMM8(3), ARIND(A1) ], extra: NoExtra }

! 68020
> callm #99,$12345678
# Instruction { size: 0, operation: CALLM, operands: [ IMM8(99), ABS32(0x12345678) ], extra: NoExtra }

> cmp2.l (a0),d3
# Instruction { size: 4, operation: CMP2, operands: [ ARIND(A0), DR(D3) ], extra: NoExtra }

> cmp2.b 90(a0,d2),a6
# Instruction { size: 1, operation: CMP2, operands: [ ARDISP(A0, dr_disp(D2, 90)), AR(A6) ], extra: NoExtra }

> chk2.w 90(a0,d2),a6
# Instruction { size: 2, operation: CHK2, operands: [ ARDISP(A0, dr_disp(D2, 90)), AR(A6) ], extra: NoExtra }

> cmpi.b #$a5,90(a0,d2*4)
# Instruction { size: 1, operation: CMPI, operands: [ IMM8(0xa5), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ], extra: NoExtra }

> cmpi.w #$a512,90(a0,d2*4)
# Instruction { size: 2, operation: CMPI, operands: [ IMM16(0xa512), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ], extra: NoExtra }

> cmpi.l #$12345678,90(a0,d2*4)
# Instruction { size: 4, operation: CMPI, operands: [ IMM32(0x12345678), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ], extra: NoExtra }

> btst #18,d0
# Instruction { size: 4, operation: BTST, operands: [ IMM16(18), DR(D0) ], extra: NoExtra }

> btst #18,(a0)+
# Instruction { size: 1, operation: BTST, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> btst d0,#18
# Instruction { size: 1, operation: BTST, operands: [ DR(D0), IMM16(18) ], extra: NoExtra }

> bclr #18,(a0)+
# Instruction { size: 1, operation: BCLR, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> bclr #18,d0
# Instruction { size: 4, operation: BCLR, operands: [ IMM16(18), DR(D0) ], extra: NoExtra }

> bchg #18,(a0)+
# Instruction { size: 1, operation: BCHG, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> bchg #18,d0
# Instruction { size: 4, operation: BCHG, operands: [ IMM16(18), DR(D0) ], extra: NoExtra }

> bset #18,(a0)+
# Instruction { size: 1, operation: BSET, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> bset #18,d0
# Instruction { size: 4, operation: BSET, operands: [ IMM16(18), DR(D0) ], extra: NoExtra }

> moves.l a0,(a1)
# Instruction { size: 4, operation: MOVES, operands: [ AR(A0), ARIND(A1) ], extra: NoExtra }

> moves.b d0,(a1)
# Instruction { size: 1, operation: MOVES, operands: [ DR(D0), ARIND(A1) ], extra: NoExtra }

> cas d0,d1,(a0)
# DecodingError::NotImplemented

> cas2 d0:d1,d2:d3,(a0):(a1)
# DecodingError::NotImplemented

// doesn't work on all CPUs, assembler freaks out
// > bgnd
// # Instruction { size: 0, operation: BGND, operands: [ NoOperand, NoOperand ] }

> illegal
# Instruction { size: 0, operation: ILLEGAL, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> nop
# Instruction { size: 0, operation: NOP, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> reset
# Instruction { size: 0, operation: RESET, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> rtd #578
# Instruction { size: 0, operation: RTD, operands: [ IMM16(578), NoOperand ], extra: NoExtra }

> rte
# Instruction { size: 0, operation: RTE, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> rtr
# Instruction { size: 0, operation: RTR, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> rts
# Instruction { size: 0, operation: RTS, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> stop #123
# Instruction { size: 0, operation: STOP, operands: [ IMM16(123), NoOperand ], extra: NoExtra }

> trapv
# Instruction { size: 0, operation: TRAPV, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> swap d7
# Instruction { size: 0, operation: SWAP, operands: [ DR(D7), NoOperand ], extra: NoExtra }

> bkpt #3
# Instruction { size: 0, operation: BKPT, operands: [ IMM8(3), NoOperand ], extra: NoExtra }

> ext.w d6
# Instruction { size: 2, operation: EXTW, operands: [ DR(D6), NoOperand ], extra: NoExtra }

> ext.l d6
# Instruction { size: 4, operation: EXTL, operands: [ DR(D6), NoOperand ], extra: NoExtra }

> extb.l d6
# Instruction { size: 4, operation: EXTBL, operands: [ DR(D6), NoOperand ], extra: NoExtra }

> link.w a0,#1234
# Instruction { size: 2, operation: LINK, operands: [ AR(A0), IMM16(1234) ], extra: NoExtra }

> link.l a5,#$12345678
# Instruction { size: 4, operation: LINK, operands: [ AR(A5), IMM32(0x12345678) ], extra: NoExtra }

> unlk a2
# Instruction { size: 0, operation: UNLK, operands: [ AR(A2), NoOperand ], extra: NoExtra }

> trap #15
# Instruction { size: 0, operation: TRAP, operands: [ IMM8(15), NoOperand ], extra: NoExtra }

> divs.w (a1)+,d2
# Instruction { size: 2, operation: DIVS, operands: [ ARINC(A1), DR(D2) ], extra: NoExtra }

> divs.l d0,d2
# Instruction { size: 4, operation: DIVSL, operands: [ DR(D0), DR(D2) ], extra: NoExtra }

> divs.l d0,d3:d2
# Instruction { size: 4, operation: DIVSL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> divsl.l d0,d3:d2
# Instruction { size: 4, operation: DIVSLL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> divu.w (a1)+,d2
# Instruction { size: 2, operation: DIVU, operands: [ ARINC(A1), DR(D2) ], extra: NoExtra }

> divu.l d0,d2
# Instruction { size: 4, operation: DIVUL, operands: [ DR(D0), DR(D2) ], extra: NoExtra }

> divu.l d0,d3:d2
# Instruction { size: 4, operation: DIVUL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> divul.l d0,d3:d2
# Instruction { size: 4, operation: DIVULL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> jmp (a0)
# Instruction { size: 0, operation: JMP, operands: [ ARIND(A0), NoOperand ], extra: NoExtra }

> jmp $12345678
# Instruction { size: 0, operation: JMP, operands: [ ABS32(0x12345678), NoOperand ], extra: NoExtra }

> jmp 123(pc)
# Instruction {
#   size: 0, operation: JMP, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     NoOperand,
#   ],
#   extra: NoExtra,
# }

> jsr (a0)
# Instruction { size: 0, operation: JSR, operands: [ ARIND(A0), NoOperand ], extra: NoExtra }

> jsr $12345678
# Instruction { size: 0, operation: JSR, operands: [ ABS32(0x12345678), NoOperand ], extra: NoExtra }

> jsr 123(pc)
# Instruction {
#   size: 0, operation: JSR, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     NoOperand,
#   ],
#   extra: NoExtra,
# }

> muls.w  d0,d1
# Instruction { size: 2, operation: MULS, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> muls.l  d0,d1
# Instruction { size: 4, operation: MULS, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> muls.l  d0,d2:d1
# Instruction { size: 4, operation: MULS, operands: [ DR(D0), DPAIR(D1, D2) ], extra: NoExtra }

> mulu.w  d0,d1
# Instruction { size: 2, operation: MULU, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> mulu.l  d0,d1
# Instruction { size: 4, operation: MULU, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> mulu.l  d0,d2:d1
# Instruction { size: 4, operation: MULU, operands: [ DR(D0), DPAIR(D1, D2) ], extra: NoExtra }

> nbcd  (a0)+
# Instruction { size: 1, operation: NBCD, operands: [ ARINC(A0), NoOperand ], extra: NoExtra }

> move sr,d0
# Instruction { size: 2, operation: MOVEFROMSR, operands: [ Implied, DR(D0) ], extra: NoExtra }

> move d0,sr
# Instruction { size: 2, operation: MOVETOSR, operands: [ DR(D0), Implied ], extra: NoExtra }

> move a0,usp
# Instruction { size: 4, operation: MOVETOUSP, operands: [ AR(A0), Implied ], extra: NoExtra }

> move usp,a3
# Instruction { size: 4, operation: MOVEFROMUSP, operands: [ Implied, AR(A3) ], extra: NoExtra }

> move d0,ccr
# Instruction { size: 2, operation: MOVETOCCR, operands: [ DR(D0), Implied ], extra: NoExtra }

> move ccr,d0
# Instruction { size: 2, operation: MOVEFROMCCR, operands: [ Implied, DR(D0) ], extra: NoExtra }

> pea (a0)
# Instruction { size: 4, operation: PEA, operands: [ ARIND(A0), Implied ], extra: NoExtra }

> movem.w d0-d4/a0-a2,-(a4)
# Instruction { size: 2, operation: MOVEM, operands: [ REGLIST(0b1111100011100000), ARDEC(A4) ], extra: NoExtra }

> movem.l (a4)+,d0-d4/a0-a2
# Instruction { size: 4, operation: MOVEM, operands: [ ARINC(A4), REGLIST(0b0000011100011111) ], extra: NoExtra }

> clr.b d0
# Instruction { size: 1, operation: CLR, operands: [ Implied, DR(D0) ], extra: NoExtra }

> clr.w (a0)+
# Instruction { size: 2, operation: CLR, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> clr.l (a4)
# Instruction { size: 4, operation: CLR, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> neg.b d0
# Instruction { size: 1, operation: NEG, operands: [ Implied, DR(D0) ], extra: NoExtra }

> neg.w (a0)+
# Instruction { size: 2, operation: NEG, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> neg.l (a4)
# Instruction { size: 4, operation: NEG, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> negx.b d0
# Instruction { size: 1, operation: NEGX, operands: [ Implied, DR(D0) ], extra: NoExtra }

> negx.w (a0)+
# Instruction { size: 2, operation: NEGX, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> negx.l (a4)
# Instruction { size: 4, operation: NEGX, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> not.b d0
# Instruction { size: 1, operation: NOT, operands: [ Implied, DR(D0) ], extra: NoExtra }

> not.w (a0)+
# Instruction { size: 2, operation: NOT, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> not.l (a4)
# Instruction { size: 4, operation: NOT, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> tst.b d0
# Instruction { size: 1, operation: TST, operands: [ Implied, DR(D0) ], extra: NoExtra }

> tst.w (a0)+
# Instruction { size: 2, operation: TST, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> tst.l (a4)
# Instruction { size: 4, operation: TST, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> chk.w (a4),d2
# Instruction { size: 2, operation: CHK, operands: [ ARIND(A4), DR(D2) ], extra: NoExtra }

> chk.l (a4),d2
# Instruction { size: 4, operation: CHK, operands: [ ARIND(A4), DR(D2) ], extra: NoExtra }

> bfchg (a4){12:7}
# Instruction { size: 0, operation: BFCHG, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfchg (a4){d2:7}
# Instruction { size: 0, operation: BFCHG, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(DYNAMIC(D2), STATIC(7)) }

> bfchg (a4){d2:d3}
# Instruction { size: 0, operation: BFCHG, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(DYNAMIC(D2), DYNAMIC(D3)) }

> bfclr (a4){12:7}
# Instruction { size: 0, operation: BFCLR, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfexts (a4){12:7},d1
# Instruction { size: 0, operation: BFEXTS, operands: [ ARIND(A4), DR(D1) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfextu (a4){12:7},d1
# Instruction { size: 0, operation: BFEXTU, operands: [ ARIND(A4), DR(D1) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfffo (a4){12:7},d1
# Instruction { size: 0, operation: BFFFO, operands: [ ARIND(A4), DR(D1) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfins d1,(a4){12:7}
# Instruction { size: 0, operation: BFINS, operands: [ DR(D1), ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfset (a4){12:7}
# Instruction { size: 0, operation: BFSET, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bftst (a4){12:7}
# Instruction { size: 0, operation: BFTST, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> .self: dbf d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_F) }

> .self: dbhi d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_HI) }

> .self: dbls d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_LS) }

> .self: dbcc d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CC) }

> .self: dbhs d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CC) }

> .self: dbcs d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CS) }

> .self: dblo d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CS) }

> .self: dbne d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_NE) }

> .self: dbeq d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_EQ) }

> .self: dbvc d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_VC) }

> .self: dbvs d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_VS) }

> .self: dbpl d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_PL) }

> .self: dbmi d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_MI) }

> .self: dbge d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_GE) }

> .self: dblt d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_LT) }

> .self: dbgt d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_GT) }

> .self: dble d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_LE) }

> addq.b #1,d0
# Instruction { size: 1, operation: ADDQ, operands: [ IMM8(1), DR(D0) ], extra: NoExtra }

> addq.w #7,a0
# Instruction { size: 2, operation: ADDQ, operands: [ IMM8(7), AR(A0) ], extra: NoExtra }

> addq.l #8,d0
# Instruction { size: 4, operation: ADDQ, operands: [ IMM8(8), DR(D0) ], extra: NoExtra }

> subq.b #1,d0
# Instruction { size: 1, operation: SUBQ, operands: [ IMM8(1), DR(D0) ], extra: NoExtra }

> subq.w #7,a0
# Instruction { size: 2, operation: SUBQ, operands: [ IMM8(7), AR(A0) ], extra: NoExtra }

> subq.l #8,d0
# Instruction { size: 4, operation: SUBQ, operands: [ IMM8(8), DR(D0) ], extra: NoExtra }

> trapne
# Instruction { size: 0, operation: TRAPCC, operands: [ NoOperand, NoOperand ], extra: Condition(CC_NE) }

> trapne.w #1234
# Instruction { size: 2, operation: TRAPCC, operands: [ IMM16(1234), NoOperand ], extra: Condition(CC_NE) }

> trapne.l #$12345678
# Instruction { size: 4, operation: TRAPCC, operands: [ IMM32(0x12345678), NoOperand ], extra: Condition(CC_NE) }

> sne (a0)
# Instruction { size: 1, operation: SCC, operands: [ Implied, ARIND(A0) ], extra: Condition(CC_NE) }

> addx.b d0,d1
# Instruction { size: 1, operation: ADDX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> addx.w d0,d1
# Instruction { size: 2, operation: ADDX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> addx.l d0,d1
# Instruction { size: 4, operation: ADDX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> addx.b -(a2),-(a3)
# Instruction { size: 1, operation: ADDX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> addx.w -(a2),-(a3)
# Instruction { size: 2, operation: ADDX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> addx.l -(a2),-(a3)
# Instruction { size: 4, operation: ADDX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> add.b (a2),d0
# Instruction { size: 1, operation: ADD, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> add.w (a2),d0
# Instruction { size: 2, operation: ADD, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> add.l (a2),d0
# Instruction { size: 4, operation: ADD, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> add.b d3,(a2)
# Instruction { size: 1, operation: ADD, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> add.w d3,(a2)
# Instruction { size: 2, operation: ADD, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> add.l d3,(a2)
# Instruction { size: 4, operation: ADD, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> subx.b d0,d1
# Instruction { size: 1, operation: SUBX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> subx.w d0,d1
# Instruction { size: 2, operation: SUBX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> subx.l d0,d1
# Instruction { size: 4, operation: SUBX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> subx.b -(a2),-(a3)
# Instruction { size: 1, operation: SUBX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> subx.w -(a2),-(a3)
# Instruction { size: 2, operation: SUBX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> subx.l -(a2),-(a3)
# Instruction { size: 4, operation: SUBX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> sub.b (a2),d0
# Instruction { size: 1, operation: SUB, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> sub.w (a2),d0
# Instruction { size: 2, operation: SUB, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> sub.l (a2),d0
# Instruction { size: 4, operation: SUB, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> sub.b d3,(a2)
# Instruction { size: 1, operation: SUB, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> sub.w d3,(a2)
# Instruction { size: 2, operation: SUB, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> sub.l d3,(a2)
# Instruction { size: 4, operation: SUB, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> suba.w d3,a2
# Instruction { size: 2, operation: SUBA, operands: [ DR(D3), AR(A2) ], extra: NoExtra }

> suba.l d3,a2
# Instruction { size: 4, operation: SUBA, operands: [ DR(D3), AR(A2) ], extra: NoExtra }

> cmpa.w (a1),a2
# Instruction { size: 2, operation: CMPA, operands: [ ARIND(A1), AR(A2) ], extra: NoExtra }

> cmpa.l (a1),a2
# Instruction { size: 4, operation: CMPA, operands: [ ARIND(A1), AR(A2) ], extra: NoExtra }

> cmpm.b (a0)+,(a2)+
# Instruction { size: 1, operation: CMPM, operands: [ ARINC(A0), ARINC(A2) ], extra: NoExtra }

> cmpm.w (a0)+,(a2)+
# Instruction { size: 2, operation: CMPM, operands: [ ARINC(A0), ARINC(A2) ], extra: NoExtra }

> cmpm.l (a0)+,(a2)+
# Instruction { size: 4, operation: CMPM, operands: [ ARINC(A0), ARINC(A2) ], extra: NoExtra }

> cmp.b (a0)+,d7
# Instruction { size: 1, operation: CMP, operands: [ ARINC(A0), DR(D7) ], extra: NoExtra }

> cmp.w (a0)+,d7
# Instruction { size: 2, operation: CMP, operands: [ ARINC(A0), DR(D7) ], extra: NoExtra }

> cmp.l (a0)+,d7
# Instruction { size: 4, operation: CMP, operands: [ ARINC(A0), DR(D7) ], extra: NoExtra }

> eor.b d7,(a0)+
# Instruction { size: 1, operation: EOR, operands: [ DR(D7), ARINC(A0) ], extra: NoExtra }

> eor.w d7,(a0)+
# Instruction { size: 2, operation: EOR, operands: [ DR(D7), ARINC(A0) ], extra: NoExtra }

> eor.l d7,-(a0)
# Instruction { size: 4, operation: EOR, operands: [ DR(D7), ARDEC(A0) ], extra: NoExtra }

> lab:
>   bra.s lab
# Instruction { size: 1, operation: BRA, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bra.w lab
# Instruction { size: 2, operation: BRA, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bra.l lab
# Instruction { size: 4, operation: BRA, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bsr.s lab
# Instruction { size: 1, operation: BSR, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bsr.w lab
# Instruction { size: 2, operation: BSR, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bsr.l lab
# Instruction { size: 4, operation: BSR, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bne.s lab
# Instruction { size: 1, operation: BCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: Condition(CC_NE), }

> lab:
>   beq.w lab
# Instruction { size: 2, operation: BCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: Condition(CC_EQ) }

> lab:
>   bcs.l lab
# Instruction { size: 4, operation: BCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: Condition(CC_CS) }

> pack d0,d1,#12
# Instruction { size: 0, operation: PACK, operands: [ DR(D0), DR(D1) ], extra: PackAdjustment(12) }

> unpk d0,d1,#12
# Instruction { size: 0, operation: UNPK, operands: [ DR(D0), DR(D1) ], extra: PackAdjustment(12) }

> pack -(a0),-(a1),#37
# Instruction { size: 0, operation: PACK, operands: [ ARDEC(A0), ARDEC(A1) ], extra: PackAdjustment(37) }

> unpk -(a0),-(a1),#37
# Instruction { size: 0, operation: UNPK, operands: [ ARDEC(A0), ARDEC(A1) ], extra: PackAdjustment(37) }

> sbcd -(a0),-(a1)
# Instruction { size: 1, operation: SBCD, operands: [ ARDEC(A0), ARDEC(A1) ], extra: NoExtra }

> sbcd d3,d4
# Instruction { size: 1, operation: SBCD, operands: [ DR(D3), DR(D4) ], extra: NoExtra }

> or.b (a0)+,d0
# Instruction { size: 1, operation: OR, operands: [ ARINC(A0), DR(D0) ], extra: NoExtra }

> or.w (a0)+,d0
# Instruction { size: 2, operation: OR, operands: [ ARINC(A0), DR(D0) ], extra: NoExtra }

> or.l (a0)+,d0
# Instruction { size: 4, operation: OR, operands: [ ARINC(A0), DR(D0) ], extra: NoExtra }

> or.b d0,(a0)+
# Instruction { size: 1, operation: OR, operands: [ DR(D0), ARINC(A0) ], extra: NoExtra }

> or.w d0,(a0)+
# Instruction { size: 2, operation: OR, operands: [ DR(D0), ARINC(A0) ], extra: NoExtra }

> or.l d0,(a0)+
# Instruction { size: 4, operation: OR, operands: [ DR(D0), ARINC(A0) ], extra: NoExtra }

> exg d0,d5
# Instruction { size: 4, operation: EXG, operands: [ DR(D0), DR(D5) ], extra: NoExtra }

> exg a0,a5
# Instruction { size: 4, operation: EXG, operands: [ AR(A0), AR(A5) ], extra: NoExtra }

> exg d3,a5
# Instruction { size: 4, operation: EXG, operands: [ DR(D3), AR(A5) ], extra: NoExtra }

> and.b (a0)+,d0
# Instruction { size: 1, operation: AND, operands: [ ARINC(A0), DR(D0) ], extra: NoExtra }

> and.w (a0)+,d0
# Instruction { size: 2, operation: AND, operands: [ ARINC(A0), DR(D0) ], extra: NoExtra }

> and.l (a0)+,d0
# Instruction { size: 4, operation: AND, operands: [ ARINC(A0), DR(D0) ], extra: NoExtra }

> and.b d0,(a0)+
# Instruction { size: 1, operation: AND, operands: [ DR(D0), ARINC(A0) ], extra: NoExtra }

> and.w d0,(a0)+
# Instruction { size: 2, operation: AND, operands: [ DR(D0), ARINC(A0) ], extra: NoExtra }

> and.l d0,(a0)+
# Instruction { size: 4, operation: AND, operands: [ DR(D0), ARINC(A0) ], extra: NoExtra }

> asl.b #3,d7
# Instruction { size: 1, operation: ASL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> asl.w #3,d7
# Instruction { size: 2, operation: ASL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> asl.l #3,d7
# Instruction { size: 4, operation: ASL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> asr.b #3,d7
# Instruction { size: 1, operation: ASR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> asr.w #3,d7
# Instruction { size: 2, operation: ASR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> asr.l #3,d7
# Instruction { size: 4, operation: ASR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> asl.b d1,d7
# Instruction { size: 1, operation: ASL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> asl.w d1,d7
# Instruction { size: 2, operation: ASL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> asl.l d1,d7
# Instruction { size: 4, operation: ASL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> asr.b d1,d7
# Instruction { size: 1, operation: ASR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> asr.w d1,d7
# Instruction { size: 2, operation: ASR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> asr.l d1,d7
# Instruction { size: 4, operation: ASR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> asl.w (a0)
# Instruction { size: 2, operation: ASL, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> asr.w (a0)
# Instruction { size: 2, operation: ASR, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> lsl.b #3,d7
# Instruction { size: 1, operation: LSL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> lsl.w #3,d7
# Instruction { size: 2, operation: LSL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> lsl.l #3,d7
# Instruction { size: 4, operation: LSL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> lsr.b #3,d7
# Instruction { size: 1, operation: LSR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> lsr.w #3,d7
# Instruction { size: 2, operation: LSR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> lsr.l #3,d7
# Instruction { size: 4, operation: LSR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> lsl.b d1,d7
# Instruction { size: 1, operation: LSL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> lsl.w d1,d7
# Instruction { size: 2, operation: LSL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> lsl.l d1,d7
# Instruction { size: 4, operation: LSL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> lsr.b d1,d7
# Instruction { size: 1, operation: LSR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> lsr.w d1,d7
# Instruction { size: 2, operation: LSR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> lsr.l d1,d7
# Instruction { size: 4, operation: LSR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> lsl.w (a0)
# Instruction { size: 2, operation: LSL, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> lsr.w (a0)
# Instruction { size: 2, operation: LSR, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> roxl.b #3,d7
# Instruction { size: 1, operation: ROXL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> roxl.w #3,d7
# Instruction { size: 2, operation: ROXL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> roxl.l #3,d7
# Instruction { size: 4, operation: ROXL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> roxr.b #3,d7
# Instruction { size: 1, operation: ROXR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> roxr.w #3,d7
# Instruction { size: 2, operation: ROXR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> roxr.l #3,d7
# Instruction { size: 4, operation: ROXR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> roxl.b d1,d7
# Instruction { size: 1, operation: ROXL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> roxl.w d1,d7
# Instruction { size: 2, operation: ROXL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> roxl.l d1,d7
# Instruction { size: 4, operation: ROXL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> roxr.b d1,d7
# Instruction { size: 1, operation: ROXR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> roxr.w d1,d7
# Instruction { size: 2, operation: ROXR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> roxr.l d1,d7
# Instruction { size: 4, operation: ROXR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> roxl.w (a0)
# Instruction { size: 2, operation: ROXL, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> roxr.w (a0)
# Instruction { size: 2, operation: ROXR, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> rol.b #3,d7
# Instruction { size: 1, operation: ROL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> rol.w #3,d7
# Instruction { size: 2, operation: ROL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> rol.l #3,d7
# Instruction { size: 4, operation: ROL, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> ror.b #3,d7
# Instruction { size: 1, operation: ROR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> ror.w #3,d7
# Instruction { size: 2, operation: ROR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> ror.l #3,d7
# Instruction { size: 4, operation: ROR, operands: [ IMM8(3), DR(D7) ], extra: NoExtra }

> rol.b d1,d7
# Instruction { size: 1, operation: ROL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> rol.w d1,d7
# Instruction { size: 2, operation: ROL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> rol.l d1,d7
# Instruction { size: 4, operation: ROL, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> ror.b d1,d7
# Instruction { size: 1, operation: ROR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> ror.w d1,d7
# Instruction { size: 2, operation: ROR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> ror.l d1,d7
# Instruction { size: 4, operation: ROR, operands: [ DR(D1), DR(D7) ], extra: NoExtra }

> rol.w (a0)
# Instruction { size: 2, operation: ROL, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> ror.w (a0)
# Instruction { size: 2, operation: ROR, operands: [ Implied, ARIND(A0) ], extra: NoExtra }

> moveq #-1,d2
# Instruction { size: 4, operation: MOVEQ, operands: [ IMM8(0xff), DR(D2) ], extra: NoExtra }

> moveq #127,d5
# Instruction { size: 4, operation: MOVEQ, operands: [ IMM8(0x7f), DR(D5) ], extra: NoExtra }

> movep.w 123(a0),d0
# Instruction { size: 2, operation: MOVEP, operands: [ ARDISP(A0, simple_disp(123)), DR(D0) ], extra: NoExtra }

> movep.l 123(a0),d0
# Instruction { size: 4, operation: MOVEP, operands: [ ARDISP(A0, simple_disp(123)), DR(D0) ], extra: NoExtra }

> movep.w d0,123(a0)
# Instruction { size: 2, operation: MOVEP, operands: [ DR(D0), ARDISP(A0, simple_disp(123)) ], extra: NoExtra }

> movep.l d0,123(a0)
# Instruction { size: 4, operation: MOVEP, operands: [ DR(D0), ARDISP(A0, simple_disp(123)) ], extra: NoExtra }

> fabs fp1
# Instruction { size: 10, operation: FABS, operands: [ FR(FP1), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsabs fp1
# Instruction { size: 10, operation: FSABS, operands: [ FR(FP1), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fdabs fp1
# Instruction { size: 10, operation: FDABS, operands: [ FR(FP1), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fabs.l (a0),fp1
# Instruction { size: 4, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_LONG_INT) }

> fabs.s (a0),fp1
# Instruction { size: 4, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fabs.d (a0),fp1
# Instruction { size: 8, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_DOUBLE) }

> fabs.w (a0),fp1
# Instruction { size: 2, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_WORD_INT) }

> fabs.b (a0),fp1
# Instruction { size: 1, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_BYTE_INT) }

> fabs.x (a0),fp1
# Instruction { size: 10, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fabs.p (a0),fp1
# Instruction { size: 12, operation: FABS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_PACKED_DECIMAL_REAL_STATIC(0)) }

> fabs fp3,fp1
# Instruction { size: 10, operation: FABS, operands: [ FR(FP3), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> facos fp0,fp1
# Instruction { size: 10, operation: FACOS, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> facos.s (a6),fp1
# Instruction { size: 4, operation: FACOS, operands: [ ARIND(A6), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fadd fp0,fp1
# Instruction { size: 10, operation: FADD, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsadd.s (a6),fp1
# Instruction { size: 4, operation: FSADD, operands: [ ARIND(A6), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fdadd.d (a6),fp1
# Instruction { size: 8, operation: FDADD, operands: [ ARIND(A6), FR(FP1) ], extra: FloatFormat(FPF_DOUBLE) }

> fasin fp3
# Instruction { size: 10, operation: FASIN, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fasin fp0,fp1
# Instruction { size: 10, operation: FASIN, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fasin.s (a0),fp1
# Instruction { size: 4, operation: FASIN, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fatan fp3
# Instruction { size: 10, operation: FATAN, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fatan fp0,fp1
# Instruction { size: 10, operation: FATAN, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fatan.s (a0),fp1
# Instruction { size: 4, operation: FATAN, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fatanh fp3
# Instruction { size: 10, operation: FATANH, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fatanh fp0,fp1
# Instruction { size: 10, operation: FATANH, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fatanh.s (a0),fp1
# Instruction { size: 4, operation: FATANH, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> lab: fbne.l lab
# Instruction { size: 4, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NE) }

> lab: fbf.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_F) }

> lab: fbeq.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_EQ) }

> lab: fbogt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_OGT) }

> lab: fboge.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_OGE) }

> lab: fbolt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_OLT) }

> lab: fbole.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_OLE) }

> lab: fbogl.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_OGL) }

> lab: fbor.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_OR) }

> lab: fbun.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_UN) }

> lab: fbueq.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_UEQ) }

> lab: fbugt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_UGT) }

> lab: fbuge.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_UGE) }

> lab: fbult.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_ULT) }

> lab: fbule.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_ULE) }

> lab: fbne.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NE) }

> lab: fbt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_T) }

> lab: fbsf.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_SF) }

> lab: fbseq.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_SEQ) }

> lab: fbgt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_GT) }

> lab: fbge.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_GE) }

> lab: fblt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_LT) }

> lab: fble.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_LE) }

> lab: fbgl.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_GL) }

> lab: fbgle.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_GLE) }

> lab: fbngle.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NGLE) }

> lab: fbngl.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NGL) }

> lab: fbnle.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NLE) }

> lab: fbnlt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NLT) }

> lab: fbnge.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NGE) }

> lab: fbngt.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_NGT) }

> lab: fbsne.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_SNE) }

> lab: fbst.w lab
# Instruction { size: 2, operation: FBCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: FPCondition(FPCC_ST) }

> fcmp fp2,fp4
# Instruction { size: 10, operation: FCMP, operands: [ FR(FP2), FR(FP4) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fcmp.s (a0),fp4
# Instruction { size: 4, operation: FCMP, operands: [ ARIND(A0), FR(FP4) ], extra: FloatFormat(FPF_SINGLE) }

> fcos fp3
# Instruction { size: 10, operation: FCOS, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fcos fp0,fp1
# Instruction { size: 10, operation: FCOS, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fcos.s (a0),fp1
# Instruction { size: 4, operation: FCOS, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fcosh fp3
# Instruction { size: 10, operation: FCOSH, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fcosh fp0,fp1
# Instruction { size: 10, operation: FCOSH, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fcosh.s (a0),fp1
# Instruction { size: 4, operation: FCOSH, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fdiv fp0,fp1
# Instruction { size: 10, operation: FDIV, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fdiv.s (a0),fp1
# Instruction { size: 4, operation: FDIV, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsdiv.s (a0),fp1
# Instruction { size: 4, operation: FSDIV, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fddiv.s (a0),fp1
# Instruction { size: 4, operation: FDDIV, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fetox fp3
# Instruction { size: 10, operation: FETOX, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fetox fp0,fp1
# Instruction { size: 10, operation: FETOX, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fetox.s (a0),fp1
# Instruction { size: 4, operation: FETOX, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fetoxm1 fp3
# Instruction { size: 10, operation: FETOXM1, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fetoxm1 fp0,fp1
# Instruction { size: 10, operation: FETOXM1, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fetoxm1.s (a0),fp1
# Instruction { size: 4, operation: FETOXM1, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fgetexp fp3
# Instruction { size: 10, operation: FGETEXP, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fgetexp fp0,fp1
# Instruction { size: 10, operation: FGETEXP, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fgetexp.s (a0),fp1
# Instruction { size: 4, operation: FGETEXP, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fgetman fp3
# Instruction { size: 10, operation: FGETMAN, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fgetman fp0,fp1
# Instruction { size: 10, operation: FGETMAN, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fgetman.s (a0),fp1
# Instruction { size: 4, operation: FGETMAN, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fint fp3
# Instruction { size: 10, operation: FINT, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fint fp0,fp1
# Instruction { size: 10, operation: FINT, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fint.s (a0),fp1
# Instruction { size: 4, operation: FINT, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fintrz fp3
# Instruction { size: 10, operation: FINTRZ, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fintrz fp0,fp1
# Instruction { size: 10, operation: FINTRZ, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fintrz.s (a0),fp1
# Instruction { size: 4, operation: FINTRZ, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> flog10 fp3
# Instruction { size: 10, operation: FLOG10, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flog10 fp0,fp1
# Instruction { size: 10, operation: FLOG10, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flog10.s (a0),fp1
# Instruction { size: 4, operation: FLOG10, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> flog2 fp3
# Instruction { size: 10, operation: FLOG2, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flog2 fp0,fp1
# Instruction { size: 10, operation: FLOG2, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flog2.s (a0),fp1
# Instruction { size: 4, operation: FLOG2, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> flogn fp3
# Instruction { size: 10, operation: FLOGN, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flogn fp0,fp1
# Instruction { size: 10, operation: FLOGN, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flogn.s (a0),fp1
# Instruction { size: 4, operation: FLOGN, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> flognp1 fp3
# Instruction { size: 10, operation: FLOGNP1, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flognp1 fp0,fp1
# Instruction { size: 10, operation: FLOGNP1, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> flognp1.s (a0),fp1
# Instruction { size: 4, operation: FLOGNP1, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fmod fp0,fp1
# Instruction { size: 10, operation: FMOD, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmod.s (a0),fp1
# Instruction { size: 4, operation: FMOD, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fmovecr #30,fp1
# Instruction { size: 10, operation: FMOVECR, operands: [ IMM8(30), FR(FP1) ], extra: NoExtra }

> lab: fdbgt d6,lab
# Instruction { size: 2, operation: FDBCC, operands: [ DR(D6), PCDISP(4, simple_disp(-4)) ], extra: FPCondition(FPCC_GT) }

> fmove fp3,fp5
# Instruction { size: 10, operation: FMOVE, operands: [ FR(FP3), FR(FP5) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmove.x (a0),fp5
# Instruction { size: 10, operation: FMOVE, operands: [ ARIND(A0), FR(FP5) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmove.s (a0),fp5
# Instruction { size: 4, operation: FMOVE, operands: [ ARIND(A0), FR(FP5) ], extra: FloatFormat(FPF_SINGLE) }

> fsmove.d (a0),fp5
# Instruction { size: 8, operation: FSMOVE, operands: [ ARIND(A0), FR(FP5) ], extra: FloatFormat(FPF_DOUBLE) }

> fdmove.p (a0),fp5
# Instruction { size: 12, operation: FDMOVE, operands: [ ARIND(A0), FR(FP5) ], extra: FloatFormat(FPF_PACKED_DECIMAL_REAL_STATIC(0)) }

> fmove.s fp4,(a1)
# Instruction { size: 4, operation: FMOVE, operands: [ FR(FP4), ARIND(A1) ], extra: FloatFormat(FPF_SINGLE) }

> fmove.p fp4,(a1){#12}
# Instruction { size: 12, operation: FMOVE, operands: [ FR(FP4), ARIND(A1) ], extra: FloatFormat(FPF_PACKED_DECIMAL_REAL_STATIC(12)) }

> fmove.p fp4,(a1){#-64}
# Instruction { size: 12, operation: FMOVE, operands: [ FR(FP4), ARIND(A1) ], extra: FloatFormat(FPF_PACKED_DECIMAL_REAL_STATIC(-64)) }

> fmove.p fp4,(a1){#63}
# Instruction { size: 12, operation: FMOVE, operands: [ FR(FP4), ARIND(A1) ], extra: FloatFormat(FPF_PACKED_DECIMAL_REAL_STATIC(63)) }

> fmove.p fp4,(a1){d3}
# Instruction { size: 12, operation: FMOVE, operands: [ FR(FP4), ARIND(A1) ], extra: FloatFormat(FPF_PACKED_DECIMAL_REAL_DYNAMIC(D3)) }

> fmovem.x fp0-fp4,-(a3)
# Instruction { size: 10, operation: FMOVEM, operands: [ REGLIST(0b11111), ARDEC(A3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmovem.x d7,-(a3)
# Instruction { size: 10, operation: FMOVEM, operands: [ DR(D7), ARDEC(A3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmovem.x d7,(a3)
# Instruction { size: 10, operation: FMOVEM, operands: [ DR(D7), ARIND(A3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmovem.x (a3),d7
# Instruction { size: 10, operation: FMOVEM, operands: [ ARIND(A3), DR(D7) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmovem.x (a3)+,d7
# Instruction { size: 10, operation: FMOVEM, operands: [ ARINC(A3), DR(D7) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmovem.x (a3)+,fp0/fp6
# Instruction { size: 10, operation: FMOVEM, operands: [ ARINC(A3), REGLIST(0b1000_0010) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmul fp0,fp1
# Instruction { size: 10, operation: FMUL, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fmul.s (a0),fp1
# Instruction { size: 4, operation: FMUL, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsmul.s (a0),fp1
# Instruction { size: 4, operation: FSMUL, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fdmul.s (a0),fp1
# Instruction { size: 4, operation: FDMUL, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fneg fp3
# Instruction { size: 10, operation: FNEG, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fneg fp0,fp1
# Instruction { size: 10, operation: FNEG, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fneg.s (a0),fp1
# Instruction { size: 4, operation: FNEG, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsneg.s (a0),fp1
# Instruction { size: 4, operation: FSNEG, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fdneg.s (a0),fp1
# Instruction { size: 4, operation: FDNEG, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fnop
# Instruction { size: 0, operation: FNOP, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> frem fp0,fp1
# Instruction { size: 10, operation: FREM, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> frem.s (a0),fp1
# Instruction { size: 4, operation: FREM, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fscale fp0,fp1
# Instruction { size: 10, operation: FSCALE, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fscale.s (a0),fp1
# Instruction { size: 4, operation: FSCALE, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsgt (a0)
# Instruction { size: 1, operation: FSCC, operands: [ Implied, ARIND(A0) ], extra: FPCondition(FPCC_GT) }

> fsgldiv fp0,fp1
# Instruction { size: 10, operation: FSGLDIV, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsgldiv.s (a0),fp1
# Instruction { size: 4, operation: FSGLDIV, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsglmul fp0,fp1
# Instruction { size: 10, operation: FSGLMUL, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsglmul.s (a0),fp1
# Instruction { size: 4, operation: FSGLMUL, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsin fp3
# Instruction { size: 10, operation: FSIN, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsin fp0,fp1
# Instruction { size: 10, operation: FSIN, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsin.s (a0),fp1
# Instruction { size: 4, operation: FSIN, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsincos fp0,fp1:fp2
# Instruction { size: 10, operation: FSINCOS, operands: [ FR(FP0), FPAIR(FP2,FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsincos.s (a0),fp1:fp2
# Instruction { size: 4, operation: FSINCOS, operands: [ ARIND(A0), FPAIR(FP2,FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsinh fp3
# Instruction { size: 10, operation: FSINH, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsinh fp0,fp1
# Instruction { size: 10, operation: FSINH, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsinh.s (a0),fp1
# Instruction { size: 4, operation: FSINH, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fsqrt fp3
# Instruction { size: 10, operation: FSQRT, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsqrt fp0,fp1
# Instruction { size: 10, operation: FSQRT, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsqrt.s (a0),fp1
# Instruction { size: 4, operation: FSQRT, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fssqrt fp3
# Instruction { size: 10, operation: FSSQRT, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fdsqrt fp3
# Instruction { size: 10, operation: FDSQRT, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsub fp0,fp1
# Instruction { size: 10, operation: FSUB, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fsub.s (a0),fp1
# Instruction { size: 4, operation: FSUB, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> fssub.x (a0),fp1
# Instruction { size: 10, operation: FSSUB, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> fdsub.l (a0),fp1
# Instruction { size: 4, operation: FDSUB, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_LONG_INT) }


> ftan fp3
# Instruction { size: 10, operation: FTAN, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftan fp0,fp1
# Instruction { size: 10, operation: FTAN, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftan.s (a0),fp1
# Instruction { size: 4, operation: FTAN, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }


> ftanh fp3
# Instruction { size: 10, operation: FTANH, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftanh fp0,fp1
# Instruction { size: 10, operation: FTANH, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftanh.s (a0),fp1
# Instruction { size: 4, operation: FTANH, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }


> ftentox fp3
# Instruction { size: 10, operation: FTENTOX, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftentox fp0,fp1
# Instruction { size: 10, operation: FTENTOX, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftentox.s (a0),fp1
# Instruction { size: 4, operation: FTENTOX, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> ftrapgt
# Instruction { size: 0, operation: FTRAPCC, operands: [ Implied, NoOperand ], extra: FPCondition(FPCC_GT) }

> ftrapeq.w #123
# Instruction { size: 2, operation: FTRAPCC, operands: [ Implied, IMM16(123) ], extra: FPCondition(FPCC_EQ) }

> ftrapne.l #1234567
# Instruction { size: 4, operation: FTRAPCC, operands: [ Implied, IMM32(1234567) ], extra: FPCondition(FPCC_NE) }

> ftst.l (a0)
# Instruction { size: 4, operation: FTST, operands: [ ARIND(A0), NoOperand ], extra: FloatFormat(FPF_LONG_INT) }

> ftst fp7
# Instruction { size: 10, operation: FTST, operands: [ FR(FP7), NoOperand ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftwotox fp3
# Instruction { size: 10, operation: FTWOTOX, operands: [ FR(FP3), FR(FP3) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftwotox fp0,fp1
# Instruction { size: 10, operation: FTWOTOX, operands: [ FR(FP0), FR(FP1) ], extra: FloatFormat(FPF_EXTENDED_REAL) }

> ftwotox.s (a0),fp1
# Instruction { size: 4, operation: FTWOTOX, operands: [ ARIND(A0), FR(FP1) ], extra: FloatFormat(FPF_SINGLE) }

> movec.l a3,cacr
# Instruction { size: 4, operation: MOVEC, operands: [ AR(A3), CONTROLREG(2) ], extra: NoExtra }

> movec.l d3,cacr
# Instruction { size: 4, operation: MOVEC, operands: [ DR(D3), CONTROLREG(2) ], extra: NoExtra }

> movec.l isp,a3
# Instruction { size: 4, operation: MOVEC, operands: [ CONTROLREG(0x804), AR(A3) ], extra: NoExtra }

> movec.l isp,d3
# Instruction { size: 4, operation: MOVEC, operands: [ CONTROLREG(0x804), DR(D3) ], extra: NoExtra }

> adda.w (a3),a2
# Instruction { size: 2, operation: ADDA, operands: [ ARIND(A3), AR(A2) ], extra: NoExtra }

> adda.l (a3),a2
# Instruction { size: 4, operation: ADDA, operands: [ ARIND(A3), AR(A2) ], extra: NoExtra }
